{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/blocks/all.js",
    "src/blocks/buttons.js",
    "src/blocks/checks.js",
    "src/blocks/multi.js",
    "src/blocks/radios.js",
    "src/blocks/select.js",
    "src/rasti.js",
    "src/utils.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvtgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "module.exports = {\n\tbuttons : require('./buttons'),\n\tchecks  : require('./checks'),\n\tradios  : require('./radios'),\n\tmulti   : require('./multi'),\n\tselect  : require('./select'),\n}",
    "const utils = require('../utils')\n\nmodule.exports = {\n\ntemplate : function(data, $el) {\n    var ret = ''\n    for (var d of data) {\n        d = utils.checkData(d)\n        ret += `<div value=\"${d.value}\">${d.label}</div>`\n    }\n    return ret\n},\n\ninit : function($el) {\n    $el.find('div').click(function(e) {\n        var $el = $(this)\n        $el.parent()\n            .val($el.attr('value'))\n            .trigger('change')\n    })\n    $el.change(function(e) {\n        var $el = $(this)\n        $el.children().removeClass('active')\n        $el.find('[value=\"'+ $el.val() +'\"]').addClass('active')\n    })\n},\n\nstyle : `\n    [rasti=buttons] > div {\n        display: inline-block;\n        margin: 5px !important;\n        padding: 5px 10px;\n        border-radius: 6px;\n        border: 2px outset rgba(255, 255, 255, 0.5);\n        background-clip: padding-box;\n        cursor: pointer;\n    }\n    [rasti=buttons] > div.active {\n        filter: contrast(1.5);\n        border-style: inset;\n        padding: 4px 11px 6px 9px;\n        transform: translateY(-1px);\n    }\n`\n\n}\n",
    "const utils = require('../utils')\n\nmodule.exports = {\n\ntemplate : function(data, $el) {\n    var uid = utils.random()\n    var ret = ''\n    for (var d of data) {\n        d = utils.checkData(d)\n        ret += `<div>\n            <input type=\"checkbox\" name=\"${uid}[]\" value=\"${d.value}\">\n            <label>${d.label}</label>\n        </div>`\n    }\n    return ret\n},\n\ninit : function($el) {\n    $el[0].value = []\n    $el.find('input').change(function(e) {\n        var $el = $(this),\n            val = $el.attr('value'),\n            values = $el.closest('[rasti=checks]')[0].value\n        if ($el.prop('checked')) {\n            values.push(val)\n        }\n        else {\n            values.remove(val)\n        }\n    })\n    $el.find('input +label').click(function(e) {\n        var $el = $(this)\n        $el.prev().click()\n    })\n    $el.change(function(e) {\n        var $el = $(this), $input, checked\n        $el.find('input').each(function(i, input){\n            $input = $(input)\n            checked = $el[0].value.includes($input.attr('value'))\n            $input.prop('checked', checked)\n        })\n    })\n},\n\nstyle : `\n    [rasti=checks]>div {\n        height: 24px;\n        padding-top: 5px\n    }\n`\n\n}",
    "const utils = require('../utils')\n\nmodule.exports = {\n\ntemplate : function(data, $el) {\n    var ret = $el[0].hasAttribute('filter')\n        ? `<input field type=\"text\" placeholder=\"${ $el.attr('filter') || self.options.multiFilterText }\"/>`\n        : ''\n    for (var d of data) {\n        d = utils.checkData(d)\n        ret += `<option value=\"${d.value}\" alias=\"${d.alias}\">${d.label}</option>`\n    }\n    return ret\n},\n\ninit : function($el) {\n    var el = $el[0],\n        field = $el.attr('field'),\n        $options = $el.closest('[page]').find('[options='+ field +']'),\n        initialized = utils.is.number(el.total)\n    \n    el.value = []\n    el.total = $options.children().length\n    el.max = parseInt($el.attr('max'))\n\n    if (initialized) {\n        // empty selected options (and remove full class in case it was full)\n        $el.find('[selected]').empty()\n        $el.removeClass('full')\n        // then exit (skip structure and bindings)\n        return\n    }\n\n    // structure\n\n    $el.prepend('<div add>')\n    $el.append('<div selected>')\n    var $selected = $el.find('[selected]')\n\n    // bindings\n\n    $el.on('click', function(e) {\n        $options.siblings('[options]').hide() // hide other options\n        if ( utils.onMobile() ) $options.parent().addClass('backdrop')\n        $options.css('left', this.getBoundingClientRect().right).show()\n        $options.find('input').focus()\n    })\n\n    $el.closest('[page]').on('click', '*:not(option)', function(e) {\n        if ( $(e.target).attr('field') === field\n          || $(e.target).parent().attr('field') === field ) return\n        if ( utils.onMobile() ) $options.parent().removeClass('backdrop')\n        $options.hide()\n    })\n\n    var toggleOption = function(e) {\n        e.stopPropagation()\n        $options.find('input').focus()\n        var $opt = $(e.target),\n            val = $opt.attr('value'),\n            values = $el[0].value\n\n        if ($opt.parent().attr('options')) {\n            // select option\n            $el.find('[selected]').append($opt)\n            values.push(val)\n        }\n        else {\n            // unselect option\n            $options.append($opt)\n            values.remove(val)\n        }\n        checkFull()\n        $el.trigger('change', {ui: true}) \n    }\n\n    $el.on('click', 'option', toggleOption)\n\n    $options.on('click', 'option', toggleOption)\n\n    $options.on('click', function(e) { $options.find('input').focus() })\n\n    $options.on('input', 'input', function(e) {\n        this.value\n            ? $options.find('option').hide().filter('[alias*='+ this.value +']').show()\n            : $options.find('option').show()\n    })\n\n    $el.on('change', function(e, params){\n        if (params && params.ui) return // triggered from ui, do nothing\n        $selected.children().each(function(i, el) {\n            $options.append(el)\n        })\n        for (var val of el.value) {\n            $selected.append($options.find('[value='+ val +']'))\n            if ( checkFull() ) break\n        }\n    })\n\n    function checkFull() {\n        var qty = $selected.children().length,\n            dif = el.value.length - qty,\n            isFull = qty >= (el.max || el.total)\n\n        if (isFull) {\n            if (dif > 0) {\n                el.value = el.value.slice(0, qty)\n                rasti.warn('Dropped %s overflowed values in el:', dif, el)\n            }\n            $el.addClass('full')\n            if ( utils.onMobile() ) $options.parent().removeClass('backdrop')\n            $options.hide()\n        }\n        else {\n            $el.removeClass('full')\n        }\n\n        return isFull\n    }\n},\n\nstyle : `\n    [rasti=multi] {\n        position: relative;\n        min-height: 35px;\n        padding-right: 20px;\n        text-shadow: 0 0 0 #000;\n        cursor: pointer;\n    }\n    [rasti=multi] [add] {\n        display: flex;\n        align-items: center;\n        position: absolute;\n        right: 0;\n        top: 0;\n        height: 100%;\n        width: 20px;\n        border-left: 1px solid rgba(0,0,0,0.2);\n    }\n    [rasti=multi] [add]:before {\n        content: '〉';\n        padding-top: 2px;\n        padding-left: 6px;\n    }\n    [rasti=multi].open [add] {\n        box-shadow: inset 0 0 2px #000;\n    }\n    [rasti=multi].full {\n        padding-right: 5px;\n    }\n    [rasti=multi].full [add] {\n        display: none;\n    }\n    [rasti=multi] option {\n        padding: 2px 0;\n    }\n    [rasti=multi] option:before {\n        content: '✕';\n        display: inline-block;\n        box-sizing: border-box;\n        height: 20px;\n        width: 20px;\n        margin-right: 5px;\n        border-radius: 50%;\n        text-align: center;\n        line-height: 1.5;\n    }\n    [rasti=multi] [selected] {\n        max-height: 100px;\n        overflow-y: auto;\n    }\n    [rasti=multi] [selected]>option:hover:before {\n        color: #d90000;\n        background-color: rgba(255, 0, 0, 0.5);\n    }\n    [rasti=multi][options] {\n        display: none;\n        position: absolute;\n        top: 0;\n        width: 250px;\n        height: 100%;\n        padding: 5px 10px;\n        border: 1px solid;\n        z-index: 10;\n        overflow-y: auto;\n    }\n    [rasti=multi][options]>option:before {\n        transform: rotate(45deg);\n    }\n    [rasti=multi][options]>option:hover:before {\n        color: #008000;\n        background-color: rgba(0, 128, 0, 0.5);\n    }\n    [rasti=multi][options] input {\n        border: 1px solid #000;\n        margin: 10px 0;\n    }\n\n`\n\n}",
    "const utils = require('../utils')\n\nmodule.exports = {\n\ntemplate : function(data, $el) {\n    var uid = utils.random()\n    var ret = ''\n    for (var d of data) {\n        d = utils.checkData(d)\n        ret += `<div>\n            <input type=\"radio\" name=\"${uid}[]\" value=\"${d.value}\">\n            <label>${d.label}</label>\n        </div>`\n    }\n    return ret\n},\n\ninit : function($el) {\n    $el.find('input').change(function(e) {\n        var $el = $(this)\n        $el.closest('[rasti=radios]').val($el.attr('value'))\n    })\n    $el.find('input +label').click(function(e) {\n        var $el = $(this)\n        $el.prev().click()\n    })\n    $el.change(function(e) {\n        var $el = $(this)\n        $el.find('[value=\"'+ $el.val() +'\"]').prop('checked', true)\n    })\n},\n\nstyle : `\n    [rasti=radios]>div {\n        height: 24px;\n        padding-top: 5px\n    }\n`\n\n}",
    "const utils = require('../utils')\n\nmodule.exports = {\n\ntemplate : function(data, $el) {\n    var ret = ''\n    for (var d of data) {\n        d = utils.checkData(d)\n        ret += `<option value=\"${d.value}\">${d.label}</option>`\n    }\n    return ret\n},\n\ninit : function($el) {\n    var imgpath = $el.attr('img')\n    if (!imgpath) return\n\n    var $selected = $el.find('[selected]'),\n        $wrapper = $('<div select>'),\n        $options = $('<div options>')\n\n    // clone original select\n    $.each($el[0].attributes, function() {\n        $wrapper.attr(this.name, this.value);\n    });\n\n    // wrap with clone\n    $el.wrap($wrapper)\n    // regain wrapper ref (it is lost when wrapping)\n    $wrapper = $el.parent()\n    // add caret\n    $wrapper.append('<div caret>&#9660</div>')\n\n    if (!$el.attr('data')) {\n        // clone original options\n        $el.find('option').each(function(opt, i) {\n            $options.append(`<div value=\"${opt.value}\">${opt.innerHTML}</div>`)\n        })\n    }\n    // add options\n    $wrapper.append($options)\n    // replace ref with divs\n    $options = $options.children()\n\n    // recreate selected option, if none select first one\n    var i = $selected.length ? $selected.index() : 0\n    $options[i].classList.add('selected')\n    // recreate select value\n    $wrapper.val($el.val() || $options[i].getAttribute('value'))\n\n    // add images\n    setImg($wrapper, imgpath)\n    $options.each(function(i, el) {\n        setImg($(el), imgpath)\n    })\n\n    // bind clicks\n    $options.click(function(e) {\n        var $opt = $(this)\n        $opt.siblings().removeClass('selected')\n        $opt.addClass('selected')\n        var $wrapper = $opt.closest('[select]')\n        $wrapper.val($opt.attr('value'))\n        var imgpath = $wrapper.attr('img')\n        if (imgpath) setImg($wrapper, imgpath)\n    })\n\n    // remove original select\n    $el.remove()\n\n},\n\nstyle : `\n    [select] select {\n        display: none;\n    }\n    [select] {\n        cursor: pointer;\n        border-radius: 4px;\n    }\n    [select]:hover [options] {\n        display: block;\n    }\n    [select] [options] {\n        display: none;\n        position: absolute;\n        margin-top: 42px;\n        margin-left: -4px;\n        border: 4px solid #b9b9b9;\n        border-radius: 4px;\n    }\n    [select] [options] div:hover {\n        border: 4px solid #fff;\n    }\n    [select] [options] div.selected {\n        border: 2px solid #0f97bd;\n    }\n    [select] [caret] {\n        float: right;\n        margin-top: 15px;\n        margin-right: 5px;\n        font-size: small;\n    }\n    [select][img] {\n        padding: 0;\n    }\n`\n\n}\n",
    "var utils = require('./utils')\nvar is = utils.is,\n    type = utils.type,\n    sameType = utils.sameType\n\n\nmodule.exports = function(name) {\n\n    var self = this\n\n    var invalidData = 0\n\n\n    // internal properties\n\n    this.name = 'rasti.' + name.replace(' ', '')\n\n    this.active = {\n        page  : null,\n        theme : '',\n        lang  : '',\n    }\n\n    this.pagers = new Map()\n\n\n    // config objects\n\n    this.options = {\n        log   : false,\n        state : false,\n        root  : '',\n        theme : 'base',\n        lang  : '',\n        stats : '%n results in %t seconds',\n    }\n\n    this.state = {}\n    Object.defineProperties(self.state, {\n        page  : { get : function() { return self.active.page.attr('page') }, enumerable : true },\n        theme : { get : function() { return self.active.theme }, enumerable : true },\n        lang  : { get : function() { return self.active.lang }, enumerable : true },\n        save : { value : function() {\n            localStorage.setItem(self.name, JSON.stringify(self.state))\n            log('State saved')\n        } },\n        get : { value : function() {\n            var state\n            try {\n                state = JSON.parse( localStorage.getItem(self.name) )\n                if ( !state ) log('No saved state found for app [%s]', self.name)\n                else if ( !is.object(state) ) invalid()\n                else return state\n            }\n            catch(err) {\n                invalid()\n            }\n\n            function invalid() {\n                error('Saved state for app [%s] is invalid', self.name)\n            }\n        } },\n        restore : { value : function() {\n            var state = self.state.get()\n            if (state) {\n                for (let prop in state) {\n                    self.state[prop] = state[prop]\n                }\n                if (state.theme) setTheme(state.theme)\n                if (state.lang) setLang(state.lang)\n                navTo(self.state.page)\n                log('State restored')\n            }\n            return state\n        } },\n        clear : { value : function() {\n            localStorage.removeItem(self.name)\n        } },\n    })\n\n    this.pages = {}\n\n    this.data = {}\n\n    this.ajax = {}\n\n    this.utils = {\n        is : is,\n        type : type,\n        sameType : sameType,\n    }\n\n    this.templates = {}\n\n    this.langs = {}\n\n\n    this.themes = {\n\n        base : {\n            font : 'normal 14px sans-serif',\n            palette : {\n                white   : '#fff',\n                lighter : '#ddd',\n                light   : '#bbb',\n                mid     : '#888',\n                dark    : '#444',\n                darker  : '#222',\n                black   : '#000',\n                detail  : 'darkcyan',\n                lighten : 'rgba(255,255,255,0.1)',\n                darken  : 'rgba(0,0,0,0.1)',\n            },\n        },\n\n    }\n\n\n    this.themeMaps = {\n\n        dark : {\n            page    : 'darker lighten', // bg, header bg\n            panel   : 'dark lighten',   // bg, header bg\n            section : 'mid lighten',    // bg, header bg\n            field   : 'light darker',   // bg, text\n            btn     : 'detail darker',  // bg, text\n            header  : 'darker',         // text\n            label   : 'darker',         // text\n            text    : 'darker',         // text\n        },\n\n        light : {\n            page    : 'lighter darken',\n            panel   : 'mid lighten',\n            section : 'light darken',\n            field   : 'lighter dark',\n            btn     : 'detail light',\n            header  : 'dark',\n            label   : 'mid',\n            text    : 'dark',\n        },\n        \n    }\n\n\n    this.fx = {\n\n        stack : function($el) {\n            $el.children().each(function(i, el){\n                setTimeout(function(){\n                    el.style.opacity = 1\n                    el.style.marginTop = '15px'\n                }, i * 50);\n            })\n        },\n\n    }\n\n\n    this.blocks = require('./blocks/all')\n\n\n    // methods\n\n    function config(config) {\n        for (var key in self) {\n            if ($.type(self[key]) === 'object' && $.type(config[key]) === 'object')\n                Object.assign(self[key], config[key])\n        }\n    }\n\n\n    function init(options) {\n\n        // cache options (if applicable)\n        if ( !is.object(options) ) warn('Init options must be an object')\n        else Object.keys(self.options).forEach(function(name){\n            if (options[name]) {\n                if ( !sameType(self.options[name], options[name])  ) warn('Init option [%s] is invalid', name)\n                else self.options[name] = options[name]\n            }\n        })\n        \n\n        // define lang (if not already defined)\n        if (!self.options.lang) {\n            keys = Object.keys(self.langs)\n            if (keys.length) self.options.lang = keys[0]\n        }\n\n\n        // append blocks styles\n        var styles = '<style blocks>'\n        for (var key in self.blocks) {\n            styles += self.blocks[key].style\n        }\n        styles += '</style>'\n        $('body').append(styles)\n\n\n        // append theme style container\n        $('body').append('<style theme>')\n\n\n        // append page-options containers\n        $('[page]').each(function(i, el) {\n            $(el).append('<div class=\"page-options\">')\n        })\n\n\n        // init rasti blocks\n        $('[rasti]').each(function(i, el) {\n            initBlock($(el))\n        })\n\n\n        // create options for selects with data source\n        $('select[data]').each(function(i, el) {\n            updateBlock($(el))\n        })\n\n\n        // create tabs\n        $('[tabs]').each(function(i, el) {\n            createTabs($(el))\n        })\n\n\n        // init nav\n        $('[nav]').click(function(e) {\n            var $el = $(this),\n                page = $el.attr('nav'),\n                params = {}\n\n            if (!page) return error('Please provide a page name in [nav] attribute of element:', el)\n\n            if (this.hasAttribute('params')) {\n                var $page = self.active.page\n                var paramkeys = $el.attr('params')\n                if (paramkeys) {\n                    // get specified params\n                    paramkeys = paramkeys.split(' ')\n                    paramkeys.forEach(function(key) {\n                        params[key] = $page.find('[navparam='+ key +']').val()\n                    })\n                }\n                else {\n                    // get all params\n                    $page.find('[navparam]').each(function(i, el){\n                        $el = $(el)\n                        key = $el.attr('navparam')\n                        if (!key) return error('Please provide a param name in [navparam] attribute of element:', el)\n                        params[key] = $el.val()\n                    })\n                }\n            }\n            navTo(page, params)\n        })\n\n\n        // init submit\n        $('[submit]').click(function(e) {\n            var $el = $(this),\n                method = $el.attr('submit'),\n                callback = $el.attr('then'),\n                template = $el.attr('render'),\n                isValidCB = callback && is.function(self.utils[callback]),\n                start = window.performance.now(), end\n\n            if (!method) return error('Plase provide an ajax method in [submit] attribute')\n\n            if (callback && !isValidCB) error('Utility method [%s] provided in [then] attribute is not defined', callback)\n            \n            $el.addClass('loading').attr('disabled', true)\n\n            submitAjax(method, function(resdata){\n                end = window.performance.now()\n                var time = Math.floor(end - start) / 1000\n                log('Ajax method [%s] took %s seconds', method, time)\n\n                if (isValidCB) self.utils[callback](resdata)\n                if (template) render(template, resdata, time)\n\n                $el.removeClass('loading').removeAttr('disabled')\n            })\n        })\n\n\n        // init render\n        $('[render]').not('[submit]').click(function(e) {\n            var $el = $(this),\n                template = $el.attr('render')\n            if (!template) return error('Please provide a template name in [render] attribute of element:', el)\n            render(template)\n        })\n\n\n        // init actions\n        for (var action of 'click change'.split(' ')) {\n            $('['+ action +']').each(function(i, el){\n                var $el = $(el),\n                    method = $el.attr( action )\n                if ( !app.utils[ method ] ) return error('Undefined utility method \"%s\" declared in [%s] attribute of element:', method, action, el)\n                $(this).on( action , app.utils[ method ] )\n            })\n        }\n\n\n        // init pages\n        var page, $page\n        for (var name in self.pages) {\n            page = self.pages[name]\n            if ( !is.object(page) ) return error('Page [%s] must be an object!', name)\n            $page = $('[page='+ name +']')\n            if ( !$page.length ) return error('No container element bound to page [%s]. Please bind one via [page] attribute', name)\n            if (page.init) {\n                if ( !is.function(page.init) ) return error('Page [%s] init property must be a function!', name)\n                else {\n                    log('Initializing page [%s]', name)\n                    self.active.page = $page\n                    page.init()\n                }\n            }\n        }\n\n\n        // fix labels\n        'input select textarea'.split(' ').forEach(function(tag){\n            $(tag + '[label]').each(function(i, el) {\n                fixLabel($(el))\n            })\n        })\n\n\n        // bind nav handler to popstate event\n        window.onpopstate = function(e) {\n            var page = e.state || location.hash.substring(1)\n            page\n                ? e.state ? navTo(page, null, true) : navTo(page)\n                : navTo(self.options.root)\n        }\n\n\n        // restore and persist state (if applicable)\n        var restored\n        if (self.options.state) {\n            restored = self.state.restore()\n            $(window).on('beforeunload', function(e){ self.state.save() })\n        }\n\n        if ( !self.options.state || !restored ) {\n\n            // set lang (if applicable and not already set)\n            if ( self.options.lang && !self.active.lang ) setLang(self.options.lang)\n            // if no lang, generate texts\n            if ( !self.options.lang ) {\n                $('[text]').each(function(i, el) {\n                    $(el).text( $(el).attr('text') )\n                })\n            }\n\n            // set theme (if not already set)\n            if ( !self.active.theme ) setTheme(self.options.theme)\n\n            // nav to page in hash or to root or to first page container\n            var page = location.hash.substring(1) || self.options.root\n            navTo(page && self.pages[page] ? page : $('[page]').first().attr('page'))\n        }\n\n\n        // init state elements\n        $('[state]').each(function(i, el){\n            var $el = $(el)\n            var prop = $el.attr('state')\n\n            if (!prop) return warn('Missing state prop in [state] attribute of element', el)\n\n            if (el.value !== undefined) {\n                // it's an element\n                bindElement($el, prop)\n            }\n            else {\n                // it's a container\n                $el.find('[field]').each(function(i, el){\n                    $el = $(el)\n                    bindElement($el, prop, $el.attr('field'))\n                })\n            }\n\n            function bindElement($el, prop, subprop){\n                var root = self.state\n                if (subprop) {\n                    root[prop] = root[prop] || {}\n                    root = root[prop]\n                    prop = subprop\n                }\n                if ( root[prop] ) {\n                    $el.val( root[prop] )\n                    if ( $el.attr('rasti') ) $el.trigger('change')\n                }\n                else root[prop] = ''\n                $el.on('change', function(e){\n                    root[prop] = $el.val()\n                })\n            }\n        })\n\n\n        $(document).trigger('rasti-ready')\n\n    }\n\n\n    function get(selector) {\n        if ( !self.active.page || !self.active.page.length ) return error('Cannot get(%s), active page is not defined', selector)\n        var $els = self.active.page.find('['+ selector +']')\n        if (!$els.length) error('Cannot get(%s), element not found in page [%s]', selector, self.active.page.attr('page'))\n        return $els\n    }\n\n    function set(selector, value) {        \n        if ( !self.active.page || !self.active.page.length ) return error('Cannot set(%s), active page is not defined', selector)\n        var $els = self.active.page.find('['+ selector +']')\n        if (!$els.length) error('Cannot set(%s), element not found in page [%s]', selector, self.active.page.attr('page'))\n        $els.each(function(i, el){\n            el.value = value\n            $(el).change()\n        })\n    }\n\n    function add(selector, ...values) {\n        if ( !self.active.page || !self.active.page.length ) return error('Cannot add(%s), active page is not defined', selector)\n        var $els = self.active.page.find('['+ selector +']')\n        if (!$els.length) error('Cannot add(%s), element not found in page [%s]', selector, self.active.page.attr('page'))\n        $els.each(function(i, el){\n            values.forEach(function(val){\n                if (is.array(val)) el.value = el.value.concat(val)\n                else el.value.push(val)\n            })\n            $(el).change()\n        })\n    }\n\n\n    function navTo(pagename, params, skipPushState) {\n\n        var page = self.pages[pagename],\n            $page = $('[page='+ pagename +']')\n\n        if (!$page) return error('Page [%s] container not found', pagename)\n        \n        self.active.page = $page\n\n        if ( params && !is.object(params) ) error('Page [%s] nav params must be an object!', pagename)\n            \n        if (page && page.nav) {\n            !is.function(page.nav)\n                ? error('Page [%s] nav property must be a function!', pagename)\n                : page.nav(params)\n        }\n\n        $('[page].active').removeClass('active')\n        self.active.page.addClass('active')\n\n        $(document).trigger('rasti-nav')\n\n        if (skipPushState) return\n        if (page && page.url) {\n            !is.string(page.url)\n                ? log('Page [%s] url property must be a string!', pagename)\n                : window.history.pushState(pagename, null, '#'+page.url)\n        }\n        else {\n            window.history.pushState(pagename, null)\n        }\n    }\n\n\n    function render(name, data, time) {\n        var template = self.templates[name]\n        if (!template) return error('Template [%s] is not defined', name)\n\n        var $el = $('[template='+ name +']')\n        if (!$el.length) return error('No element bound to template [%s]. Please bind one via [template] attribute.', name)\n        var el = $el[0]\n\n        if (!data) {\n            var datakey = $el.attr('data')\n            if (!datakey) return error('No data found for template [%s]. Please provide in ajax response or via [data] attribute in element:', name, el)\n            data = self.data[datakey]\n            if (!data) return error('Undefined data source \"%s\" in [data] attribute of element:', datakey, el)\n        }\n\n        if (!data.length) return $el.html('<div msg center textc>NO RESULTS</div>')\n\n        var paging = $el.attr('paging')\n        paging ? initPager($el, data) : $el.html( template(data) )\n        if (el.hasAttribute('stats')) {\n            var stats = $('<div section class=\"stats\">')\n            stats.html( app.options.stats.replace('%n', data.length).replace('%t', time) )\n            $el.prepend(stats)\n        }\n\n        var fxkey = $el.attr('fx')\n        if (fxkey) {\n            var fx = self.fx[fxkey]\n            if (!fx) return error('Undefined fx \"%s\" in [fx] attribute of element', fxkey, el)\n            paging ? fx($el.find('.results')) : fx($el)\n        }\n\n    }\n\n\n    function setTheme(themeString) {\n        var themeName = themeString.split(' ')[0],\n            theme = self.themes[themeName]\n\n        if (!theme) return error('Theme [%s] not found', themeName)\n\n        var mapName = themeString.split(' ')[1] || ( is.object(theme.maps) && Object.keys(theme.maps)[0] ) || 'dark',\n            themeMap = ( is.object(theme.maps) && theme.maps[mapName] ) || self.themeMaps[mapName]\n\n        if (!themeMap) return error('Theme map [%s] not found', mapName)\n\n        log('Setting theme [%s:%s]', themeName, mapName)\n        self.active.theme = themeName\n        \n        var values = {\n            font : theme.font || self.themes.base.font,\n        }, colorNames, colors, c1, c2, defaultColorName\n\n        // map palette colors to attributes\n        for (var attr of Object.keys(themeMap)) {\n            if (!self.themeMaps.dark[attr]) return error('Mapping error in theme [%s]. Incorrect theme map property [%s]', themeName, attr)\n\n            colorNames = [c1, c2] = themeMap[attr].split(' ')\n            colors = [theme.palette[ c1 ], theme.palette[ c2 ]]\n\n            for (var i in colors) {\n                defaultColorName = self.themeMaps.dark[attr].split(' ')[i]\n                if (defaultColorName && !colors[i]) {\n                    colors[i] = self.themes.base.palette[ colorNames[i] ]\n                    if (!colors[i]) {\n                        warn('Mapping error in theme [%s] for attribute [%s]. Color [%s] not found. Falling back to default color [%s].', themeName, attr, colorNames[i], defaultColorName)\n                        colors[i] = self.themes.base.palette[ defaultColorName ]\n                    }\n                }\n            }\n            values[attr] = colors\n        }\n\n        // generate theme style and apply it\n        $('style[theme]').html( getThemeStyle(values) )\n\n        // apply any styles defined by class\n        for (var key of Object.keys(theme.palette)) {\n            var color = theme.palette[key]\n            $('.' + key).css('background-color', color)\n        }\n    }\n\n\n    function setLang(langName) {\n        var lang = self.langs[ langName ]\n        if (!lang) return error('Lang [%s] not found', langName)\n        if ( !is.object(lang) ) return error('Lang [%s] must be an object!', langName)\n        log('Setting lang [%s]', langName)\n        self.active.lang = langName\n\n        var $elems = $(), $el, keys, string\n        var attributes = 'label header text placeholder'.split(' ')\n\n        attributes.forEach(function(attr){\n            $elems = $elems.add('['+attr+']')\n        })\n\n        $elems.each(function(i, el) {\n            if (el.hasAttribute('fixed')) el = el.children[0]\n            $el = $(el)   \n            keys = el.langkeys\n\n            if (!keys) {\n                keys = {}\n                attributes.forEach(function(attr){\n                    if ($el.attr(attr)) keys[attr] = $el.attr(attr)\n                })\n                el.langkeys = keys\n            }\n\n            for (var attr in keys) {\n                string = getString(langName, keys[attr])\n                attr === 'text'\n                    ? $el.text(string || keys[attr])\n                    : string ? $el.attr(attr, string) : null\n            }\n        })\n    }\n\n\n    function updateBlock($el, data) {\n        var el = $el[0]\n        var type = el.nodeName == 'SELECT' ? 'select' : $el.attr('rasti')\n        if (!type) return error('Missing block type, please provide via [rasti] attribute in element:', el)\n        \n        var block = self.blocks[type]\n        if (!block) return error('Undefined block type \"%s\" in [rasti] attribute of element:', type, el)\n        \n        if (!data) {\n            var datakey = $el.attr('data')\n            if (!datakey) return error('Missing datakey, please provide via [data] attribute in element:', el)\n\n            data = self.data[datakey]\n            if (!data) return error('Undefined data source \"%s\" in [data] attribute of element:', datakey, el)\n        }\n\n        var $options, field, alias\n\n        // TODO: this should be in the block, not here\n        if (type === 'multi') {\n            var field = $el.attr('field')\n            if (!field) return error('Missing [field] attribute value in element:', el)\n            // check if options div already exists\n            $options = $el.closest('[page]').find('[options='+ field +']')\n            if (!$options.length) {\n                // if not create it and append it to page\n                $options = $('<div field rasti='+ type +' options='+ field +'>')\n                $el.closest('[page]').children('.page-options').append($options)\n            }   \n        }\n        else {\n            $options = $el\n        }\n\n        is.function(data)\n            ? data(applyTemplate)\n            : applyTemplate(data)\n        \n        function applyTemplate(data) {\n            $options.html( block.template(data, $el) )\n\n            if (invalidData) {\n                var field = $el.attr('field'),\n                    page = $el.closest('[page]').attr('page')\n                warn('Detected %s invalid data entries for field [%s] in page [%s]', invalidData, field, page)\n                invalidData = 0\n            }\n        }\n\n\n    }\n\n\n    function toggleFullScreen(e) {\n        var prefixes = 'moz webkit'.split(' ')\n        prefixes.forEach(function(p){\n            if ( ! (p + 'FullscreenElement' in document) ) return\n            if ( !document[ p + 'FullscreenElement' ]) {\n                document.documentElement[ p + 'RequestFullScreen' ]();\n            }\n            else if (document[ p + 'CancelFullScreen' ]) {\n                document[ p + 'CancelFullScreen' ]();\n            }\n        })\n    }\n\n\n    // internal utils\n\n    function createTabs($el) {\n        var el = $el[0],\n            $tabs = $el.children(':not(.page-options)'),\n            $labels = $('<div class=\"tab-labels\">'),\n            $bar = $('<div class=\"bar\">'),\n            $tab, label, position\n\n        $tabs.each(function(i, tab){\n            $tab = $(tab)\n            $tab.attr('tab', i)\n            label = $tab.attr('label') || $tab.attr('header') || $tab.attr('name') || 'TAB ' + (i+1)\n\n            $labels.append($(`<div tab-label=${i} text=\"${ label }\">`))\n        })\n\n        $labels.append($bar).appendTo($el)\n\n        $labels.on('click', function(e){\n            var $label = $(e.target),\n                tabnr = $label.attr('tab-label'),\n                $tab = $tabs.filter(`[tab=\"${ tabnr }\"]`)\n\n            $tabs.removeClass('active')\n            $tab.addClass('active')[0].scrollIntoView()\n\n            $labels.children().removeClass('active')\n            $label.addClass('active')\n            \n        })\n\n        $el.on('scroll', function(e){\n            position = el.scrollLeft / el.scrollWidth\n            $bar.css({ left : position * el.offsetWidth })\n        })\n\n        $(document).on('rasti-nav', function(e){\n            if (!isInActivePage($el)) return\n            $bar.css({ width : el.offsetWidth / $tabs.length })\n            if (!$labels.children('.active').length) $labels.children().first().click()\n        })\n\n        $(window).on('resize', function (e) {\n            if (!isInActivePage($el)) return\n            $labels.find('.active').click()\n            $bar.css({ width : el.offsetWidth / $tabs.length })\n        })\n\n        function isInActivePage($el) {\n            return self.active.page.find($el).length\n                || self.active.page.attr('page') === $el.attr('page')\n        }\n\n    }\n    \n\n    function initBlock($el) {\n        var el = $el[0]\n        var type = el.nodeName == 'SELECT' ? 'select' : $el.attr('rasti')\n        if (!type) return error('Missing block type, please provide via [rasti] attribute in element:', el)\n        \n        var block = self.blocks[type]\n        if (!block) return error('Undefined block type \"%s\" in [rasti] attribute of element:', type, el)\n\n        // if applicable, create options from data source\n        if ($el.attr('data')) updateBlock($el)\n\n        block.init($el)\n    }\n\n\n    function initPager($el, data) {\n        var name = $el.attr('template'),\n            template = self.templates[name],\n            fx = $el.attr('fx') && self.fx[$el.attr('fx')],\n            page_size = parseInt($el.attr('paging')),\n            pager = newPager(name, data, page_size),\n            paging, columns, sizes\n\n        if ($el[0].hasAttribute('columns')) columns = `\n            <div class=\"columns floatl ib_\">\n                <label>Columns:</label>\n                <button btn>1</button>\n                <button btn value=2>2</button>\n                <button btn value=3>3</button>\n            </div>`\n\n        if (pager.total > 1) paging = `<div class=\"paging ib_\">\n                <button class=\"btn prev\">&lt;</button>\n                <span class=\"page\"></span>\n                <button class=\"btn next\">&gt;</button>\n            </div>`\n\n        sizes = `<div class=\"sizes floatr ib_\">\n                <label>Page size:</label>\n                <button btn value=5>5</button>\n                <button btn value=10>10</button>\n                <button btn value=20>20</button>\n            </div>`\n\n        $el.html(`\n            <div class=\"results scrolly\"></div>\n            <div class=\"controls small bottom centerx ib_\">\n                ${ columns || '' }\n                ${ paging || '' }\n                ${ sizes }\n            </div>\n        `)\n\n        $controls = $el.children('.controls')\n        $results = $el.children('.results')\n\n        $controls.on('click', '.next', function(e){\n            update( pager.next() )\n        })\n\n        $controls.on('click', '.prev', function(e){\n            update( pager.prev() )\n        })\n\n        $controls.on('click', '.sizes button', function(e){\n            pager.setPageSize(this.value)\n            update( pager.next() )\n            pager.total > 1\n                ? $controls.find('.paging').show()\n                : $controls.find('.paging').hide()\n        })\n\n        $controls.on('click', '.columns button', function(e){\n            $results.removeClass('columns-2 columns-3')\n                .addClass(this.value ? 'columns-' + this.value : '')\n        })\n\n        $results.html(template( pager.next() ))\n        $controls.find('.page').html(pager.page + '/' + pager.total)\n\n        function update(data){\n            $results.html( template(data) )\n            $controls.find('.page').html(pager.page + '/' + pager.total)\n            if ( is.function(fx) ) fx($results)\n        }\n    }\n\n    function getPager(id) {\n        let pager = self.pagers.get(id)\n        if (!pager) error('No pager for template [%s]', id)\n        return pager\n    }\n    function newPager(id, results, page_size) {\n        let pager = new Pager(id, results, page_size)\n        self.pagers.set(id, pager)\n        return pager\n    }\n    function deletePager(pager) {\n        if (!pager || !pager.id) return\n        self.pagers.delete(pager.id)\n    }\n\n\n    function submitAjax(method, callback) {\n        var ajax = self.ajax[ method ]\n        if ( !is.function(ajax) ) return error('Ajax method ['+ method +'] is not defined')\n\n        var $form = $('[ajax='+ method +']')\n        if (!$form.length) return error('No container element bound to ajax method [%s]. Please bind one via [ajax] attribute', method)\n\n        var reqdata = {}, field\n        $form.find('[field]').each(function(i, el){\n            $el = $(el)\n            field = $el.attr('field')\n            if (field) {\n                reqdata[field] = $el.val() || $el.attr('value')\n            }\n        })\n\n        ajax(reqdata, callback)\n    }\n\n\n    function getThemeStyle(values) {\n        return `\n            body {\n                font: ${ values.font };\n                color: ${ values.text[0] };\n            }\n            [page]    { background-color: ${ values.page[0] }; }\n            [panel]   { background-color: ${ values.panel[0] }; }\n            [section] { background-color: ${ values.section[0] }; }\n\n            [page][header]:before    { background-color: ${ values.page[1] }; }\n            [panel][header]:before   { background-color: ${ values.panel[1] }; }\n            [section][header]:before { background-color: ${ values.section[1] }; }\n\n            [tabs] > .tab-labels        { background-color: ${ values.panel[0] }; }\n            [tabs] > .tab-labels > .bar { background-color: ${ values.btn[0] }; }\n\n            [field] {\n                background-color: ${ values.field[0] };\n                color: ${ values.field[1] };\n            }\n\n            [btn], .btn, [rasti=buttons] > div {\n                background-color: ${ values.btn[0] };\n                color: ${ values.btn[1] }; \n            }\n\n            [header]:before { color: ${ values.header[0] }; }\n            [label]:not([header]):before  { color: ${ values.label[0] }; }\n            `\n    }\n\n\n    function getString(lang, key) {\n        if ( !is.object(self.langs[lang]) ) {\n            error('Lang [%s] is not defined', lang)\n            return\n        }\n        var string = self.langs[lang][key]\n        if ( !is.string(string) ) warn('Lang [%s] does not contain key [%s]', lang, key)\n        else return string\n    }\n\n\n    function fixLabel($el) {\n        var $div = $(`<div fixed label=\"${ $el.attr('label') }\" >`)\n        $el.wrap($div)\n        $el[0].removeAttribute('label')\n    }\n\n\n    function setImg($el, basepath) {\n        $el.css('background-image', 'url('+ basepath + ($el.val() || $el.attr('value')) +'.png)')\n    }\n\n\n    function log(...params) {\n        if (self.options.log == 'DEBUG') console.log.call(this, ...params)\n    }\n    function warn(...params) {\n        if (self.options.log) console.warn.call(this, ...params)\n    }\n    function error(...params) {\n        console.error.call(this, ...params)\n    }\n\n\n    class Pager {\n\n        constructor(id, results, page_size) {\n            this.id = id\n            if ( !is.string(id) ) return error('Pager id must be a string')\n            this.logid = `Pager for template [${ this.id }]:`\n            if ( !is.array(results) ) return error('%s Results must be an array', this.logid)\n            if ( !is.number(page_size) ) return error('%s Page size must be a number', this.logid)\n            this.results = results\n            this.page_size = page_size\n            this.page = 0\n            this.total = Math.ceil(this.results.length / this.page_size)\n\n        }\n\n        next() {\n            if (this.hasNext()) this.page++\n            else warn('%s No next page', this.logid)\n            return this.getPageResults(this.page)\n        }\n\n        prev() {\n            if (this.hasPrev()) this.page--\n            else warn('%s No previous page', this.logid)\n            return this.getPageResults(this.page)\n        }\n\n        hasNext() {\n            return this.results.length > this.page * this.page_size\n        }\n\n        hasPrev() {\n            return this.page > 1\n        }\n\n        setPageSize(size) {\n            size = parseInt(size)\n            if ( !is.number(size) ) return error('%s Must specify a number as the page size', this.logid)\n            this.page_size = size\n            this.page = 0\n            this.total = Math.ceil(this.results.length / this.page_size)\n        }\n\n        getPageResults(page) {\n            if ( !is.number(page) ) {\n                error('%s Must specify a page number to get results from', this.logid)\n                return []\n            }\n            try {\n                var i = (page -1) * this.page_size\n                return this.results.slice(i, i + this.page_size)\n            }\n            catch(err) {\n                error('%s Could not get results of page %s, error:', this.logid, page, err)\n                return []\n            }\n        }\n\n    }\n\n\n    // prototype extensions\n\n    (function(){\n\n        Array.prototype.remove = function(el) {\n            var i = this.indexOf(el);\n            if (i >= 0) this.splice(i, 1);\n        }\n\n        String.prototype.capitalize = function() {\n            return this.length && this[0].toUpperCase() + this.slice(1).toLowerCase()\n        }\n\n    })()\n\n\n    // static logger methods\n\n    module.exports.log = log\n    module.exports.warn = warn\n    module.exports.error = error\n\n\n    // api\n\n    return Object.freeze({\n\n        // objects\n        state : this.state,\n        pages : this.pages,\n        data : this.data,\n        ajax : this.ajax,\n        utils : this.utils,\n        langs : this.langs,\n        themes : this.themes,\n        themeMaps : this.themeMaps,\n        blocks : this.blocks,\n        templates : this.templates,\n        fx : this.fx,\n        options : this.options,\n\n        // methods\n        config : config,\n        init : init,\n        get : get,\n        set : set,\n        add : add,\n        navTo : navTo,\n        render : render,\n        setLang : setLang,\n        setTheme : setTheme,\n        updateBlock : updateBlock,\n        toggleFullScreen : toggleFullScreen,\n    })\n\n}\n",
    "const is = {}\n'object function array string number regex boolean'.split(' ').forEach(function(t){\n    is[t] = function(exp){ return type(exp) === t }\n})\nfunction type(exp) {\n        var clazz = Object.prototype.toString.call(exp)\n        return clazz.substring(8, clazz.length-1).toLowerCase()\n}\nfunction sameType(exp1, exp2) {\n    return type(exp1) === type(exp2)\n}\n\n\nfunction checkData(data) {\n    switch (typeof data) {\n    case 'string':\n        data = {value: data, label: data, alias: data.toLowerCase()}\n        break\n    case 'object':\n        if ( !is.string(data.value) || !is.string(data.label) ) {\n            error('Invalid data object (must have string properties \"value\" and \"label\"):', data)\n            invalidData++\n            data = {value: '', label: 'INVALID DATA', alias: ''}\n        }\n        else if ( !is.string(data.alias) ) {\n            if (data.alias) {\n                error('Invalid data property \"alias\" (must be a string):', data)\n                invalidData++\n            }\n            data.alias = data.value.toLowerCase()\n        }\n        else data.alias = data.alias.toLowerCase() +' '+ data.value.toLowerCase()\n        break\n    default:\n        error('Invalid data (must be a string or an object):', data)\n        invalidData++\n        data = {value: '', label: 'INVALID DATA', alias: ''}\n    }\n    return data\n}\n\n\nfunction rastiError(msg, ...args){\n    this.msg = msg\n    this.el = args.pop()\n    this.args = args\n}\n\n\nfunction random() {\n    return (Math.random() * 6 | 0) + 1\n}\n\n\nfunction onMobile() {\n    return window.innerWidth < 500\n}\n\n\nmodule.exports = {\n\tis : is,\n\ttype : type,\n\tsameType : sameType,\n\tcheckData : checkData,\n\trandom : random,\n\tonMobile : onMobile,\n    rastiError : rastiError,\n}"
  ]
}