{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/blocks/all.js",
    "src/blocks/buttons.js",
    "src/blocks/checks.js",
    "src/blocks/list.js",
    "src/blocks/multi.js",
    "src/blocks/radios.js",
    "src/blocks/select.js",
    "src/components.js",
    "src/extensions.js",
    "src/icons.js",
    "src/rasti.js",
    "src/themes.js",
    "src/utils.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdzzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACziz
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "module.exports = {\n    list    : require('./list'),\n\tbuttons : require('./buttons'),\n\tchecks  : require('./checks'),\n\tradios  : require('./radios'),\n\tmulti   : require('./multi'),\n\tselect  : require('./select'),\n}",
    "const utils = require('../utils')\n\nmodule.exports = {\n\ntemplate : function(data, $el) {\n    return data\n        .map( d => utils.checkData(d) )\n        .map( d => `<div value=\"${d.value}\">${d.label}</div>` )\n        .join('')\n},\n\ninit : function($el) {\n    $el.on('click', 'div', function(e) {\n        $el.val($(e.target).attr('value'))\n            .trigger('change')\n    })\n    $el.on('change', function(e) {\n        $el.children().removeClass('active')\n        $el.find('[value=\"'+ $el.val() +'\"]').addClass('active')\n    })\n},\n\nstyle : `\n    [block=buttons] > div {\n        display: inline-block;\n        margin: 5px !important;\n        padding: 5px 10px;\n        border-radius: 6px;\n        border: 2px outset rgba(255, 255, 255, 0.5);\n        background-clip: padding-box;\n        cursor: pointer;\n    }\n    [block=buttons] > div.active {\n        filter: contrast(1.5);\n        border-style: inset;\n        padding: 4px 11px 6px 9px;\n        transform: translateY(-1px);\n    }\n`\n\n}\n",
    "const utils = require('../utils')\n\nmodule.exports = {\n\ntemplate : function(data, $el) {\n    var uid = utils.random()\n    return data\n        .map( d => utils.checkData(d) )\n        .map( d => `<input type=\"checkbox\" name=\"${uid}[]\" value=\"${d.value}\"><label>${d.label}</label>` )\n        .join('')\n},\n\ninit : function($el) {\n    var values = $el[0].value = []\n    $el.on('click', 'label', function(e) {\n        // forward clicks to hidden input\n        $(e.currentTarget).prev().click()\n    })\n    $el.on('change', 'input', function(e) {\n        // update component value\n        var $input = $(e.currentTarget),\n            val = $input.attr('value')\n        $input.prop('checked')\n            ? values.push(val)\n            : values.remove(val)\n    })\n    $el.on('change', function(e) {\n        // update component ui\n        var $input, checked\n        $el.find('input').each(function(i, input){\n            $input = $(input)\n            checked = values.includes( $input.attr('value') )\n            $input.prop('checked', checked)\n        })\n    })\n},\n\nstyle : ``\n\n}",
    "const utils = require('../utils')\n\nmodule.exports = {\n\ntemplate : function(data, $el) {\n    return data\n        .map( d => `<li>${d}</li>` )\n        .join('')\n},\n\ninit : function($el) {},\n\nstyle : ''\n\n}",
    "const utils = require('../utils')\n\nmodule.exports = {\n\ntemplate : function(data, $el) {\n    $el[0].total = data.length // WARNING : SIDE EFFECTS\n\n    var ret = $el[0].hasAttribute('filter')\n        ? `<input field type=\"text\" placeholder=\"${ $el.attr('filter') }\"/>`\n        : ''\n\n    return ret + data\n        .map( d => utils.checkData(d) )\n        .map( d => `<option value=\"${d.value}\" alias=\"${d.alias}\">${d.label}</option>` )\n        .join('')\n},\n\ninit : function($el) {\n    var el = $el[0]\n    var field = $el.attr('field')\n\n    if (!field) return rasti.error('Missing field name in [field] attribute of element:', el)\n    \n    el.value = []\n    el.max = parseInt($el.attr('max'))\n\n    if (el.initialized) {\n        // empty selected options (and remove full class in case it was full)\n        $el.find('[selected]').empty()\n        $el.removeClass('full')\n        // then exit (skip structure and bindings)\n        return\n    }\n\n    // structure\n\n    $el.html('<div selected/><div add/>')\n    $el.closest('[page]').children('.page-options')\n        .append('<div field block=multi options='+ field +'>')\n    var $selected = $el.find('[selected]')\n    var $options = $el.closest('[page]').find('[options='+ field +']')\n\n    // bindings\n\n    $el.on('click', function(e) {\n        $options.siblings('[options]').hide() // hide other options\n        if ( utils.onMobile() ) $options.parent().addClass('backdrop')\n        $options.css('left', this.getBoundingClientRect().right).show()\n        $options.find('input').focus()\n    })\n\n    $el.closest('[page]').on('click', '*:not(option)', function(e) {\n        if ( $(e.target).attr('field') === field\n          || $(e.target).parent().attr('field') === field ) return\n        if ( utils.onMobile() ) $options.parent().removeClass('backdrop')\n        $options.hide()\n    })\n\n    var toggleOption = function(e) {\n        e.stopPropagation()\n        $options.find('input').focus()\n        var $opt = $(e.target),\n            val = $opt.attr('value'),\n            values = $el[0].value\n\n        if ($opt.parent().attr('options')) {\n            // select option\n            $el.find('[selected]').append($opt)\n            values.push(val)\n        }\n        else {\n            // unselect option\n            $options.append($opt)\n            values.remove(val)\n        }\n        checkFull()\n        $el.trigger('change', {ui: true}) \n    }\n\n    $el.on('click', 'option', toggleOption)\n\n    $options.on('click', 'option', toggleOption)\n\n    $options.on('click', function(e) { $options.find('input').focus() })\n\n    $options.on('input', 'input', function(e) {\n        this.value\n            ? $options.find('option').hide().filter('[alias*='+ this.value +']').show()\n            : $options.find('option').show()\n    })\n\n    $el.on('change', function(e, params){\n        if (params && params.ui) return // triggered from ui, do nothing\n        $selected.children().each(function(i, el) {\n            $options.append(el)\n        })\n        for (var val of el.value) {\n            $selected.append($options.find('[value='+ val +']'))\n            if ( checkFull() ) break\n        }\n    })\n\n    function checkFull() {\n        var qty = $selected.children().length,\n            dif = el.value.length - qty,\n            isFull = qty >= (el.max || el.total)\n\n        if (isFull) {\n            if (dif > 0) {\n                el.value = el.value.slice(0, qty)\n                rasti.warn('Dropped %s overflowed values in el:', dif, el)\n            }\n            $el.addClass('full')\n            if ( utils.onMobile() ) $options.parent().removeClass('backdrop')\n            $options.hide()\n        }\n        else {\n            $el.removeClass('full')\n        }\n\n        return isFull\n    }\n\n    el.initialized = true\n},\n\nstyle : `\n    [block=multi] {\n        display: flex;\n        min-height: 35px;\n        padding-right: 0;\n        text-shadow: 0 0 0 #000;\n        cursor: pointer;\n    }\n    [block=multi] [add] {\n        display: flex;\n        align-items: center;\n        width: 20px;\n        border-left: 1px solid rgba(0,0,0,0.2);\n    }\n    [block=multi] [add]:before {\n        content: '〉';\n        padding-left: 6px;\n    }\n    [block=multi].open [add] {\n        box-shadow: inset 0 0 2px #000;\n    }\n    [block=multi].full {\n        padding-right: 5px;\n    }\n    [block=multi].full [add] {\n        display: none;\n    }\n    [block=multi] option {\n        padding: 2px 0;\n    }\n    [block=multi] option:before {\n        content: '✕';\n        display: inline-block;\n        box-sizing: border-box;\n        height: 20px;\n        width: 20px;\n        margin-right: 5px;\n        border-radius: 50%;\n        text-align: center;\n        line-height: 1.5;\n    }\n    [block=multi] [selected] {\n        flex-basis: 100%;\n        max-height: 100px;\n        overflow-y: auto;\n    }\n    [block=multi] [selected] > option:hover:before {\n        color: #d90000;\n        background-color: rgba(255, 0, 0, 0.5);\n    }\n    [block=multi][options] {\n        display: none;\n        position: absolute;\n        top: 0;\n        width: 250px;\n        height: 100%;\n        padding: 5px 10px;\n        border: 1px solid;\n        z-index: 10;\n        overflow-y: auto;\n    }\n    [block=multi][options] > option:before {\n        transform: rotate(45deg);\n    }\n    [block=multi][options] > option:hover:before {\n        color: #008000;\n        background-color: rgba(0, 128, 0, 0.5);\n    }\n    [block=multi][options] input {\n        border: 1px solid #000;\n        margin: 10px 0;\n    }\n\n`\n\n}",
    "const utils = require('../utils')\n\nmodule.exports = {\n\ntemplate : function(data, $el) {\n    var uid = utils.random()\n    return data\n        .map( d => utils.checkData(d) )\n        .map( d => `<input type=\"radio\" name=\"${uid}\" value=\"${d.value}\"/><label>${d.label}</label>` )\n        .join('')\n},\n\ninit : function($el) {\n    $el.on('click', 'label', function(e) {\n        // forward clicks to hidden input\n        $(e.currentTarget).prev().click()\n    })\n    $el.on('change', 'input', function(e) {\n        // update component value\n        $el.val( $(e.currentTarget).attr('value') )\n    })\n    $el.on('change', function(e) {\n        // update component ui\n        $el.find('[value=\"'+ $el.val() +'\"]').prop('checked', true)\n    })\n},\n\nstyle : ``\n\n}",
    "const utils = require('../utils')\n\nmodule.exports = {\n\ntemplate : function(data, $el) {\n    var ret = ''\n    for (var d of data) {\n        d = utils.checkData(d)\n        ret += `<option value=\"${d.value}\">${d.label}</option>`\n    }\n    return ret\n},\n\ninit : function($el) {\n    var imgpath = $el.attr('img')\n    if (!imgpath) return\n\n    var $selected = $el.find('[selected]'),\n        $wrapper = $('<div select>'),\n        $options = $('<div options>')\n\n    // clone original select\n    $.each($el[0].attributes, function() {\n        $wrapper.attr(this.name, this.value);\n    });\n\n    // wrap with clone\n    $el.wrap($wrapper)\n    // regain wrapper ref (it is lost when wrapping)\n    $wrapper = $el.parent()\n    // add caret\n    $wrapper.append('<div caret>&#9660</div>')\n\n    if (!$el.attr('data')) {\n        // clone original options\n        $el.find('option').each(function(opt, i) {\n            $options.append(`<div value=\"${opt.value}\">${opt.innerHTML}</div>`)\n        })\n    }\n    // add options\n    $wrapper.append($options)\n    // replace ref with divs\n    $options = $options.children()\n\n    // recreate selected option, if none select first one\n    var i = $selected.length ? $selected.index() : 0\n    $options[i].classList.add('selected')\n    // recreate select value\n    $wrapper.val($el.val() || $options[i].getAttribute('value'))\n\n    // add images\n    setImg($wrapper, imgpath)\n    $options.each(function(i, el) {\n        setImg($(el), imgpath)\n    })\n\n    // bind clicks\n    $options.click(function(e) {\n        var $opt = $(this)\n        $opt.siblings().removeClass('selected')\n        $opt.addClass('selected')\n        var $wrapper = $opt.closest('[select]')\n        $wrapper.val($opt.attr('value'))\n        var imgpath = $wrapper.attr('img')\n        if (imgpath) setImg($wrapper, imgpath)\n    })\n\n    // remove original select\n    $el.remove()\n\n},\n\nstyle : `\n    [select] select {\n        display: none;\n    }\n    [select] {\n        cursor: pointer;\n        border-radius: 4px;\n    }\n    [select]:hover [options] {\n        display: block;\n    }\n    [select] [options] {\n        display: none;\n        position: absolute;\n        margin-top: 42px;\n        margin-left: -4px;\n        border: 4px solid #b9b9b9;\n        border-radius: 4px;\n    }\n    [select] [options] div:hover {\n        border: 4px solid #fff;\n    }\n    [select] [options] div.selected {\n        border: 2px solid #0f97bd;\n    }\n    [select] [caret] {\n        float: right;\n        margin-top: 15px;\n        margin-right: 5px;\n        font-size: small;\n    }\n    [select][img] {\n        padding: 0;\n    }\n`\n\n}\n",
    "const { is, resolveAttr } = require('./utils')\n\nclass History {\n\n    constructor() {\n        this.i = 0\n        this.content = []\n    }\n    \n    back() {\n        if (this.i > 0) navTo(this.content[--(this.i)])\n    }\n    forth() {\n        if (this.i < this.content.length) navTo(this.content[++(this.i)])\n    }\n    push(page) {\n        this.content.splice(this.i, null, page)\n        this.i++\n    }\n}\n\n\nclass Pager {\n\n    constructor(id, results, page_size) {\n        this.id = id\n        if ( !is.string(id) ) return rasti.error('Pager id must be a string')\n        this.logid = `Pager for template [${ this.id }]:`\n        if ( !is.array(results) ) return rasti.error('%s Results must be an array', this.logid)\n        if ( !is.number(page_size) ) return rasti.error('%s Page size must be a number', this.logid)\n        this.results = results\n        this.sizes = [5, 10, 20]\n        this.page_size = page_size\n        this.page = 0\n        this.total = Math.ceil(this.results.length / this.page_size)\n\n    }\n\n    next() {\n        if (this.hasNext()) this.page++\n        else rasti.warn('%s No next page', this.logid)\n        return this.getPageResults(this.page)\n    }\n\n    prev() {\n        if (this.hasPrev()) this.page--\n        else rasti.warn('%s No previous page', this.logid)\n        return this.getPageResults(this.page)\n    }\n\n    hasNext() {\n        return this.results.length > this.page * this.page_size\n    }\n\n    hasPrev() {\n        return this.page > 1\n    }\n\n    setPageSize(size) {\n        size = parseInt(size)\n        if ( !is.number(size) ) return rasti.error('%s Must specify a number as the page size', this.logid)\n        this.page_size = size\n        this.page = 0\n        this.total = Math.ceil(this.results.length / this.page_size)\n    }\n\n    getPageResults(page) {\n        if ( !is.number(page) ) {\n            rasti.error('%s Must specify a page number to get results from', this.logid)\n            return []\n        }\n        try {\n            var i = (page -1) * this.page_size\n            return this.results.slice(i, i + this.page_size)\n        }\n        catch(err) {\n            rasti.error('%s Could not get results of page %s, error:', this.logid, page, err)\n            return []\n        }\n    }\n\n}\n\n\nfunction state(app) {\n    function invalid() {\n        error('Saved state for app [%s] is invalid', app.name)\n    }\n\n    return Object.defineProperties({}, {\n        page  : { get : _ => app.active.page.attr('page'), enumerable : true },\n        theme : { get : _ => app.active.theme, enumerable : true },\n        lang  : { get : _ => app.active.lang, enumerable : true },\n        save : { value : _ => {\n            localStorage.setItem('rasti.' + app.name, JSON.stringify(app.state))\n            log('State saved')\n        } },\n        get : { value : _ => {\n            var state\n            try {\n                state = JSON.parse( localStorage.getItem('rasti.' + app.name) )\n                if ( !state ) log('No saved state found for app [%s]', app.name)\n                else if ( !is.object(state) ) invalid()\n                else return state\n            }\n            catch(err) {\n                invalid()\n            }\n        } },\n        restore : { value : _ => {\n            var state = app.state.get()\n            if (state) {\n                log('Restoring state...')\n                for (let prop in state) {\n                    app.state[prop] = state[prop]\n                }\n                if (state.theme) setTheme(state.theme)\n                if (state.lang) setLang(state.lang)\n                navTo(state.page)\n                log('State restored')\n            }\n            return state\n        } },\n        clear : { value : _ => {\n            localStorage.removeItem('rasti.' + app.name)\n        } },\n    })\n}\n\n\nfunction crud(app) {\n    function checkDataSource(fn) {\n        return (datakey, ...args) => {\n            const data = app.data[datakey]\n            if (!data) {\n                error('Undefined data source \"%s\"', datakey)\n                return false\n            }\n            else return fn(data, datakey, ...args)\n        }\n    }\n\n    return {\n        create : checkDataSource((data, datakey, el) => {\n            const exists = data.find(e => e === el)\n            exists\n                ? warn('El [%s] already exists in data source [%s]', el, datakey)\n                : data.push(el)\n            return !exists\n        }),\n        delete : checkDataSource((data, datakey, el) => {\n            const exists = data.find(e => e === el)\n            !exists\n                ? warn('El [%s] not found in data source [%s]', el, datakey)\n                : data.remove(el)\n            return exists\n        }),\n        update : checkDataSource((data, datakey, el, newel) => {\n            const exists_el = data.find(e => e === el)\n            const exists_newel = data.find(e => e === newel)\n            if (!exists_el) warn('El [%s] not found in data source [%s]', el, datakey)\n            if (exists_newel) warn('El [%s] already exists in data source [%s]', newel, datakey)\n            const valid = exists_el && !exists_newel\n            if (valid) data.update(el, newel)\n            return valid\n        }),\n        addInputEl : $el => {\n            let template = resolveAttr($el, 'template')\n            template = app.templates[template]\n            // TODO: try to parse the template identifying props in order to build a similar html tree but with inputs instead of divs or spans, binding each input to its corresponding prop\n            $el.append('<div class=rasti-crud-input>' + template(['TEST']) +'</div>')\n        },\n        removeInputEl : $el => {\n            $el.find('.rasti-crud-input').detach()\n        },\n    }\n}\n\n\nmodule.exports = {\n    History,\n    Pager,\n    state,\n    crud,\n}\n",
    "// prototype extensions\nObject.defineProperties(Array.prototype, {\n    get : { value : function(i) {\n       return i < 0 ? this[this.length + i] : this[i]\n    }},\n    remove : { value : function(el) {\n        var i = this.indexOf(el)\n        if (i >= 0) this.splice(i, 1)\n    }},\n    update : { value : function(el, newel) {\n        var i = this.indexOf(el)\n        if (i >= 0) this.splice(i, 1, newel)\n    }},\n    capitalize : { value : function() {\n       return this.length && this[0].toUpperCase() + this.slice(1).toLowerCase()\n    }},\n})\n\n\n// $ extensions\n$.fn.move = function(options) {\n    var options = Object.assign({\n            handle: this,\n            container: this.parent()\n        }, options),\n        object = this,\n        newX, newY,\n        nadir = object.css('z-index'),\n        apex = 100000,\n        hold = 'mousedown touchstart',\n        move = 'mousemove touchmove',\n        release = 'mouseup touchend'\n\n    if (!object[0].hasAttribute('move')) object.attr('move', '')\n\n    options.handle.on(hold, function(e) {\n        if (e.type == 'mousedown' && e.which != 1) return\n        object.css('z-index', apex)\n        var marginX = options.container.width() - object.width(),\n            marginY = options.container.height() - object.height(),\n            oldX = object.position().left,\n            oldY = object.position().top,\n            touch = e.touches,\n            startX = touch ? touch[0].pageX : e.pageX,\n            startY = touch ? touch[0].pageY : e.pageY\n\n        $(window)\n            .on(move, function(e) {\n                var touch = e.touches,\n                    endX = touch ? touch[0].pageX : e.pageX,\n                    endY = touch ? touch[0].pageY : e.pageY\n                newX = Math.max(0, Math.min(oldX + endX - startX, marginX))\n                newY = Math.max(0, Math.min(oldY + endY - startY, marginY))\n\n                window.requestAnimationFrame\n                    ? requestAnimationFrame(setElement)\n                    : setElement()\n            })\n            .one(release, function(e) {\n                e.preventDefault()\n                object.css('z-index', nadir)\n                $(this).off(move).off(release)\n            })\n\n        e.preventDefault()\n    })\n\n    return this\n\n    function setElement() {\n        object.css({top: newY, left: newX});\n    }\n}\n",
    "module.exports = {\n\napp : {\n    user : '👤',\n    users : '👥',\n    gear : '⚙️',\n    lock : '🔒',\n    'open-lock' : '🔓',\n    key : '🔑',\n    home : '🏠',\n    exit : '🚪',\n    call : '📞',\n    search : '🔍',\n    battery : '🔋',\n    'power-plug' : '🔌',\n    alarm : '🔔',\n    'volume-min' : '🔈',\n    'volume-mid' : '🔉',\n    'volume-max' : '🔊',\n    'dim' : '🔅',\n    'bright' : '🔆',\n    access : '♿',\n    bars : '☰',\n    'h-dots' : '⋯',\n    'v-dots' : '⋮',\n    rows : '𝌆',\n    columns : '▥',\n    grid : '▦',\n    'spaced-grid' : '𝍖',\n    warning : '⚠',\n    error : '⨂',\n    ban : '🛇',\n    mute : '🔇',\n    'alarm-off' : '🔕',\n},\n\noffice : {\n    file : '📄',\n    folder : '📂',\n    edit : '✏️',\n    pen : '🖊️',\n    pen2 : '🖋️',\n    paintbrush : '🖌️',\n    cut : '✂️',\n    clip : '📎',\n    clipboard : '📋',\n    link : '🔗',\n    ruler : '📏',\n    pin : '📌',\n    'safety-pin' : '🧷',\n    card : '💳',\n    label : '🏷️',\n    memo : '📝',\n    scroll : '📜',\n    book : '📕',\n    books : '📚',\n    bookmark : '🔖',\n    'open-book' : '📖',\n    notebook : '📓',\n    notepad : '🗒️',\n    calendar : '📅',\n    envelope : '✉️',\n    email : '📧',\n    mailbox : '📫',\n    package : '📦',\n    briefcase : '💼',\n    newspaper : '📰',\n    cabinet : '🗄️',\n    'trash-can' : '🗑️',\n},\n\nelectronics : {\n    laptop : '💻',\n    desktop : '🖥️',\n    keyboard : '⌨️',\n    'pc-mouse' : '🖱️',\n    printer : '🖨️',\n    smartphone : '📱',\n    telephone : '☎️',\n    microphone : '🎤',\n    'studio-mic' : '🎙️',\n    headphones : '🎧',\n    camera : '📷',\n    'video-camera' : '📹',\n    'movie-camera' : '🎥',\n    projector : '📽️',\n    tv : '📺',\n    radio : '📻',\n    stereo : '📾',\n    loudspeaker : '📢',\n    gamepad : '🎮',\n    joystick : '🕹️',\n    'sd-card' : '⛘',\n    cd : '💿',\n    minidisc : '💽',\n    floppy : '💾',\n    tape : '📼',\n},\n\ntools : {\n    wrench : '🔧',\n    hammer : '🔨',\n    pick : '⛏️',\n    tools : '🛠️',\n    tools2 : '⚒️',\n    toolbox : '🧰',\n    clamp : '🗜️',\n    bolt : '🔩',\n    anchor : '⚓',\n    scales : '⚖️',\n    'old-key' : '🗝️',\n    map : '🗺️',\n    compass : '🧭',\n    magnet : '🧲',\n    abacus : '🧮',\n    bulb : '💡',\n    flashlight : '🔦',\n    microscope : '🔬',\n    telescope : '🔭',\n    antenna : '📡',\n    satellite : '🛰️',\n    watch : '⌚',\n    stopwatch : '⏱️',\n    clock : '⏰',\n    hourglass : '⌛',\n    dagger : '🗡️',\n    swords : '⚔️',\n    shield : '🛡️',\n    bow : '🏹',\n    gun : '🔫',\n},\n\nvehicles : {\n    skate : '🛹',\n    scooter : '🛴',\n    bicycle : '🚲',\n    motorscooter : '🛵',\n    motorcycle : '🏍️',\n    car : '🚗',\n    'race-car' : '🏎️',\n    rv : '🚙',\n    bus : '🚌',\n    minibus : '🚐',\n    truck : '🚚',\n    ambulance : '🚑',\n    'fire-engine' : '🚒',\n    metro : '🚇',\n    train : '🚄',\n    locomotive : '🚂',\n    canoe : '🛶',\n    sailboat : '⛵',\n    speedboat : '🚤',\n    motorboat : '🛥️',\n    ferry : '⛴️',\n    ship : '🚢',\n    plane : '✈️',\n    'small-plane': '🛩️',\n    helicopter : '🚁',\n    rocket : '🚀',\n    ufo : '🛸',\n},\n\nfaces : {\n    man : '👨',\n    woman : '👩',\n    prince : '🤴',\n    princess : '👸',\n    robot : '🤖',\n    skull : '💀',\n    imp : '👿',\n    monster : '👾',\n    alien : '👽',\n    ghost : '👻',\n    goblin : '👺',\n    ogre : '👹',\n},\n\ncharacters : {\n    teacher : '👨‍🏫',\n    teacherw : '👩‍🏫',\n    scientist : '👨‍🔬',\n    scientistw : '👩‍🔬',\n    hacker : '👨‍💻',\n    hackerw : '👩‍💻',\n    artist : '👨‍🎨',\n    artistw : '👩‍🎨',\n    doctor : '👨‍⚕️',\n    doctorw : '👩‍⚕️',\n    astronaut : '👨‍🚀',\n    astronautw : '👩‍🚀',\n    elf : '🧝‍♂️',\n    elfw : '🧝‍♀️',\n    mage : '🧙‍♂️',\n    magew : '🧙‍♀️',\n    genie : '🧞‍♂️',\n    geniew : '🧞‍♀️',\n    fairy : '🧚',\n    fairym : '🧚‍♂️',\n    vampire : '🧛‍♂️',\n    vampirew : '🧛‍♀️',\n    zombie : '🧟‍♂️',\n    zombiew : '🧟‍♀️',\n},\n\nanimals : {\n    elefant : '🐘',\n    rhino : '🦏',\n    monkey : '🐒',\n    gorilla : '🦍',\n    sheep : '🐑',\n    ram : '🐏',\n    goat : '🐐',\n    deer : '🦌',\n    camel : '🐪',\n    horse : '🐎',\n    pig : '🐖',\n    cow : '🐄',\n    turtle : '🐢',\n    rabbit : '🐇',\n    squirrel : '🐿️',\n    hedgehog : '🦔',\n    badger : '🦡',\n    mouse : '🐁',\n    rat : '🐀',\n    cat : '🐈',\n    dog : '🐕',\n    leopard : '🐆',\n    tiger : '🐅',\n    snake : '🐍',\n    gecko : '🦎',\n    crocodile : '🐊',\n    dragon : '🐉',\n    dinosaur : '🦕',\n    't-rex' : '🦖',\n    dolphin : '🐬',\n    shark : '🦈',\n    whale : '🐋',\n    whale2 : '🐳',\n    fugu : '🐡',\n    nemo : '🐟',\n    dori : '🐠',\n    shrimp : '🦐',\n    crab : '🦀',\n    lobster : '🦞',\n    squid : '🦑',\n    octopus : '🐙',\n    penguin : '🐧',\n    bird : '🐦',\n    dove : '🕊️',\n    parrot : '🦜',\n    eagle : '🦅',\n    duck : '🦆',\n    swan : '🦢',\n    owl : '🦉',\n    bat : '🦇',\n    turkey : '🦃',\n    rooster : '🐓',\n    chick : '🐥',\n    chick2 : '🐤',\n    chick3: '🐣',\n    snail : '🐌',\n    butterfly : '🦋',\n    bee : '🐝',\n    ant : '🐜',\n    cricket : '🦗',\n    bug : '🐛',\n    ladybug : '🐞',\n    spider : '🕷️',\n    scorpion : '🦂',\n    microbe : '🦠',\n},\n\nplants : {\n    leaf : '🍂',\n    herb : '🌿',\n    maple : '🍁',\n    shamrock : '☘️',\n    luck : '🍀',\n    wheat : '🌾',\n    corn : '🌽',\n    flower : '🌼',\n    sunflower : '🌻',\n    rose : '🌹',\n    hibiscus : '🌺',\n    sakura : '🌸',\n    tulip : '🌷',\n    tree : '🌳',\n    pine : '🌲',\n    'palm-tree' : '🌴',\n    cactus : '🌵',\n    sprout : '🌱',\n    mushroom : '🍄',\n    nut : '🌰',\n},\n\nnature : {\n    sun : '☀️',\n    moon : '🌕',\n    'new-moon' : '🌑',\n    'crescent-moon' : '🌙',\n    fire : '🔥',\n    water : '💧',\n    wave : '🌊',\n    ice : '❄',\n    wind : '💨',\n    cloud : '☁️',\n    mountain : '⛰️',\n    volcano : '🌋',\n    rainbow : '🌈',\n    comet : '☄️',\n    asiania : '🌏',\n    americas : '🌎',\n    eurafrica : '🌍',\n    galaxy : '🌌',\n    dna : '🧬',\n},\n\nactions : {\n    add : '✚',\n    remove : '─',\n    undo : '↶',\n    redo : '↷',\n    reload : '⟳',\n    sync : '🗘',\n    minimize : '🗕',\n    restore : '🗗',\n    maximize : '🗖',\n    close : '⨯',\n    copy : '🗇',\n    accept : '✔️',\n    cancel : '✖️',\n    eject : '⏏',\n    play : '▶',\n    pause : 'Ⅱ',\n    'play-pause' : '⏯',\n    stop : '■',\n    prev : '⏮',\n    next : '⏭',\n    rec : '⚫',\n    'rec-on' : '🔴',\n    select : '⛶',\n    select2 : '⬚',\n},\n\nculture : {\n    pommee : '🕂',\n    maltese : '✠',\n    latin : '✝',\n    latin2 : '🕇',\n    celtic : '🕈',\n    jew : '✡',\n    ankh : '☥',\n    peace : '☮',\n    om : '🕉',\n    'ying-yang' : '☯',\n    atom : '⚛️',\n    comunism : '☭',\n    'moon-star' : '☪',\n    health : '⛨',\n    darpa : '☸',\n    diamonds : '❖',\n},\n\nmusic : {\n    note : '🎵',\n    notes : '🎶',\n    sharp : '♯',\n    flat : '♭',\n    cleff : '🎼',\n    'cleff-g' : '𝄞',\n    'cleff-f' : '𝄢',\n    'cleff-c' : '𝄡',\n    guitar : '🎸',\n    piano : '🎹',\n    violin : '🎻',\n    saxophone : '🎷',\n    trumpet : '🎺',\n    drum : '🥁',\n},\n\nastro : {\n    aries : '♈',\n    tauro : '♉',\n    gemini : '♊',\n    piscis : '♋',\n    leo : '♌',\n    virgo : '♍',\n    libra : '♎',\n    scorpio : '♏',\n    sagitarius : '♐',\n    capricorn : '♑',\n    aquarius : '♒',\n    cancer : '♓',\n    mercury : '☿️',\n    venus : '♀',\n    earth : '♁',\n    mars : '♂',\n    jupiter : '♃',\n    saturn : '♄',\n    uranus : '♅',\n    neptune : '♆',\n    pluto : '♇',\n    ceres : '⚳',\n    pallas : '⚴',\n    juno : '⚵',\n    vesta : '⚶',\n    chiron : '⚷',\n},\n\nchess : {\n    wqueen : '♔',\n    wking : '♕',\n    wtower : '♖',\n    wbishop : '♗',\n    whorse : '♘',\n    wpawn : '♙',\n    bqueen : '♚',\n    bking : '♛',\n    btower : '♜',\n    bbishop : '♝',\n    bhorse : '♞',\n    bpawn : '♟',\n},\n\narrows : {\n    /*\n    ↑ ↓ ← → \n    ⬅ ➡ ⬆ ⬇\n    ⇦ ⇨ ⇧ ⇩ \n    ◀ ▶ ▲ ▼ \n    ◁ ▷ △ ▽ \n    ↶ ↷\n    */\n},\n\nkeys : {\n    command : '⌘',\n    option : '⌥',\n    shift : '⇧',\n    'caps-lock' : '⇪',\n    backspace : '⌫',\n    return : '⏎',\n    enter : '⎆',\n    escape : '⎋',\n    tab : '↹',\n},\n\ngeometric : {\n    'curved-triangle' : '🛆',\n    'curved-square' : '▢',\n    pentagon : '⬟',\n    hexagon : '⬢',\n},\n\nhieroglyph : {\n    'an-eye' : '𓁹',\n    'tear-eye' : '𓂀',\n    'an-ear' : '𓂈',\n    'writing-arm' : '𓃈',\n    'a-leg' : '𓂾',\n    'watering-leg' : '𓃂',\n    'closed-hand' : '𓂧',\n    'open-hand' : '𓂩',\n    'a-finger' : '𓂭',\n    'crying-blank-eye' : '𓂍',\n    'arms-hat-spear' : '𓂙',\n    'a-staff' : '𓋈',\n    'a-fan' : '𓇬',\n    'a-jar' : '𓄣',\n    'a-beetle' : '𓆣',\n    'a-wasp' : '𓆤',\n    'a-fairy' : '𓋏',\n    'sitting-man' : '𓀀',\n    'happy-sitting-man' : '𓁏',\n    'exited-sitting-man' : '𓁕',\n    'sitting-woman' : '𓁑',\n    'sitting-bird-man' : '𓁟',\n    'sitting-wolf-man' : '𓁢',\n    'dancing-man' : '𓀤',\n    'broken-arms-man' : '𓀣',\n    'upside-down-man' : '𓀡',\n    'dead-guy' : '𓀿',\n    'three-leg-guy' : '𓁲',\n},\n\nother : {\n    'thumbs-up' : '👍',\n    'thumbs-down' : '👎',\n    cool : '🤙',\n    metal : '🤘',\n    spock : '🖖',\n    strong : '💪',\n    eye : '👁️',\n    ear : '👂',\n    brain : '🧠',\n    glasses : '👓',\n    sunglasses : '🕶️',\n    goggles : '🥽',\n    ribbon : '🎀',\n    backpack : '🎒',\n    cart : '🛒',\n    poo : '💩',\n    heart : '❤️',\n    hearts : '💕',\n    'broken-heart' : '💔',\n    star : '⭐',\n    crown : '👑',\n    trophy : '🏆',\n    diamond : '💎',\n    jar : '🏺',\n    pill : '💊',\n    globe : '🌐',\n    bolt : '⚡',\n    flag : '⚑',\n    recycle : '♻',\n    network : '🖧',\n    newbie : '🔰',\n    trident : '🔱',\n    japan : '🗾',\n    fuji : '🗻',\n    'tokyo-tower' : '🗼',\n    liberty : '🗽',\n    die : '🎲',\n    palette : '🎨',\n    painting : '🖼️',\n    'crystal-ball' : '🔮',\n    bomb : '💣',\n    poison : '☠️',\n    bitcoin : '₿',\n    bisexual : '⚥',\n    pansexual : '⚧',\n},\n\n/*\n\n🐼🐻🐺🐮🐷🐭🐹🐰🐱🐶🐵🐴🐯🐲🐨🐸🦄\n\nsports & entertainment\n🏄🏃🏂🏇🏊🏀⚽⚾🎾⛷⛸⛵⛵\n🎳🎲🎱🎰🎯🎭🎬🎩\n🎊🎉🎈🎇🎆🎅🎄🎃🎂🎁\n\nfood & drink\n🍔🍕🍝🍞🍟🍖🍗🍙🍚🍛🍜🍡🍣🍤\n🍲🍱🍰🍮🍬🍫🍪🍩🍨🍧🍦\n🍓🍒🍑🍐🍏🍎🍍🍌🍋🍊🍉🍈🍇🍅🍄\n🍻🍺🍹🍸🍷🍶🍴🍳\n\nother\n🎐🎏🎎🎋🏯\n🏰🏭🏬🏫🏪🏩🏨🏧🏦🏥🏣🏢\n✋❦\n\n*/\n\n}\n",
    "require('./extensions')\nconst { History, Pager, state, crud } = require('./components')\nconst utils = require('./utils')\nconst { is, sameType, resolveAttr, html } = utils\nconst { themes, themeMaps } = require('./themes')\n\nconst options = {\n    persist : false,\n    history : false,\n    root    : '',\n    theme   : 'base',\n    lang    : '',\n    stats   : '%n results in %t seconds',\n    noData  : 'No data available',\n    imgPath : 'img/',\n    imgExt  : '.png',\n}\n\nconst breakpoints = {\n    phone : 500,\n    tablet : 800,\n}\nconst media = {}\nfor (let device in breakpoints) {\n    media[device] = window.matchMedia(`(max-width: ${ breakpoints[device] }px)`).matches\n}\n\nconst TEXT_ATTRS = 'label header text placeholder'.split(' ')\nconst EVENT_ATTRS = 'click change hover load'.split(' ')\nconst ACTION_ATTRS = 'show hide toggle'.split(' ')\nconst NOCHILD_TAGS = 'input select textarea img'.split(' ')\n\nconst log = (...params) => {\n    if (rasti.options.log.search(/debug/i) != -1) console.log.call(this, ...params)\n}\nconst warn = (...params) => {\n    if (rasti.options.log.search(/(warn)|(debug)/i) != -1) console.warn.call(this, ...params)\n}\nconst error = (...params) => {\n    console.error.call(this, ...params)\n}\n\n\nfunction rasti(name, container) {\n\n    const errPrefix = 'Cannot create rasti app: '\n\n    if ( !is.string(name) ) return error(errPrefix + 'app must have a name!')\n\n    this.name = name.replace(' ', '')\n\n    if ( !container ) {\n        container = $('body')\n    }\n    else if ( !(container.selector) ) {\n        if ( is.string(container) || (container.tagName && 'BODY DIV'.search(container.tagName) != -1) ) container = $(container)\n        else return error(errPrefix + 'app container is invalid. Please provide a selector string, a jQuery object ref or a DOM element ref')\n    }\n    container.attr('rasti', this.name)\n    \n    const self = this\n\n    let invalidData = 0\n\n\n    // private properties  \n\n    this.active = {\n        page  : null,\n        theme : '',\n        lang  : '',\n    }\n    this.pagers = new Map()\n    this.crud = crud(this)\n\n\n    // public properties\n\n    this.options = Object.assign({}, options)\n    this.defaults = {\n        stats : self.options.stats,\n        noData : self.options.noData,\n    }\n    this.state = state(this)\n\n    this.pages = {}\n    this.data = {}\n    this.ajax = {}\n    this.utils = {}\n    this.templates = {}\n    this.langs = {}\n\n    this.themes = themes\n    this.themeMaps = themeMaps\n\n\n    // methods\n\n    function extend(props) {\n        if (!props || !is.object(props)) return error('Cannot extend app: no properties found')\n        for (let key in self) {\n            if ( is.object(self[key]) && is.object(props[key]) )\n                Object.assign(self[key], props[key])\n        }\n    }\n\n\n    function init(options) {\n        const initStart = window.performance.now()\n        log('Initializing app [%s]...', self.name)\n\n        container\n            .addClass('big loading backdrop')\n            .removeAttr('hidden')\n\n        // cache options\n        if (options) {\n            if ( !is.object(options) ) warn('Init options must be an object!')\n            else Object.keys(self.options).forEach( key => {\n                if (options[key]) {\n                    if ( !sameType(self.options[key], options[key])  ) warn('Init option [%s] is invalid', key)\n                    else self.options[key] = options[key]\n                }\n            })\n        }\n\n\n        // apply defaults\n        Object.keys(self.defaults).forEach( key => {\n            if (!self.options[key]) self.options[key] = self.defaults[key]\n        })\n        \n\n        // define lang (if not already defined)\n        if (!self.options.lang) {\n            const keys = Object.keys(self.langs)\n            if (keys.length) self.options.lang = keys[0]\n        }\n\n\n        // append theme style container\n        container.append('<style theme>')\n\n\n        // append page-options containers\n        container.find('[page]').each( (i, el) => {\n            $(el).append('<div class=\"page-options\">')\n        })\n\n\n        // init rasti blocks\n        container.find('[block]').each( (i, el) => {\n            initBlock($(el))\n        })\n\n\n        // create items for selects and lists with data source\n        container.find('select[data]')\n            .add('ol[data]', container)\n            .add('ul[data]', container)\n            .each( (i, el) => {\n                updateBlock($(el))\n            })\n\n\n        // create tabs\n        container.find('.tabs').each( (i, el) => {\n            createTabs($(el))\n        })\n        if (media.tablet || media.phone) container.find('.tabs-tablet').each( (i, el) => {\n            createTabs($(el))\n        })\n        if (media.phone) container.find('.tabs-phone').each( (i, el) => {\n            createTabs($(el))\n        })\n\n\n        // add close btn to modals\n        container.find('[modal]').each( (i, el) => {\n            $('<div icon=close class=\"top right\" />')\n            .on('click', e => {\n                el.style.display = 'none'\n                self.active.page.find('.backdrop').removeClass('backdrop')\n            })\n            .appendTo(el)\n        })\n\n\n        // auto-close menus\n        container.find('[menu]').each( (i, el) => {\n            $(el).on('click', e => {\n                el.style.display = 'none'\n            })\n        })\n\n\n        // init field validations\n        container.find('[validate]').each( (i, btn) => {\n            btn.disabled = true\n            const $container = $(btn).parent()\n            const $fields = $container.find('[field][required]')\n            $fields.each( (i, field) => {\n                const invalid = field.validity && !field.validity.valid\n                field.classList.toggle('error', invalid)\n                $(field).change( e => {\n                    invalid = field.validity && !field.validity.valid\n                    field.classList.toggle('error', invalid)\n                    btn.disabled = $container.find('[field].error').length\n                })\n            })\n        })\n\n\n        // init nav\n        container.find('[nav]').click( e => {\n            const el = e.target\n            const $el = $(el)\n            const page = $el.attr('nav')\n            let params = {}\n\n            if (!page) return error('Missing page name in [nav] attribute of element:', el)\n\n            if (el.hasAttribute('params')) {\n                const $page = self.active.page\n                let navparams = $el.attr('params')\n                let $paramEl\n\n                if (navparams) {\n                    // check to see if params is an object\n                    if (navparams[0]=='{') {\n                        try {\n                            params = JSON.parse(navparams)\n                        }\n                        catch(err){\n                            error('Invalid JSON in [params] attribute of element:', el)\n                            error('Tip: be sure to use double quotes (\"\") for both keys and values')\n                            return\n                        }\n                    }\n                    else {\n                        // get values of specified navparams\n                        navparams = params.split(' ')\n                        navparams.forEach( key => {\n                            $paramEl = $page.find('[navparam='+ key +']')\n                            if ($paramEl.length) params[key] = $paramEl.val()\n                            else warn('Could not find navparam element [%s]', key)\n                        })\n                    }\n                }\n                else {\n                    // get values of all navparams in page\n                    $page.find('[navparam]').each( (i, el) => {\n                        const $el = $(el)\n                        const key = resolveAttr($el, 'navparam')\n                        if (key) params[key] = $el.val()\n                    })\n                }\n            }\n            navTo(page, params)\n        })\n\n\n        // init submit\n        container.find('[submit]').click( e => {\n            const $el = $(e.target)\n            const method = $el.attr('submit')\n            const callback = $el.attr('then')\n            const template = $el.attr('render')\n            const isValidCB = callback && is.function(self.utils[callback])\n            const start = window.performance.now()\n\n            if (!method) return error('Missing ajax method in [submit] attribute of el:', this)\n\n            if (callback && !isValidCB) error('Undefined utility method [%s] declared in [then] attribute of el:', callback, this)\n            \n            $el.addClass('loading').attr('disabled', true)\n\n            submitAjax(method, resdata => { \n                const time = Math.floor(window.performance.now() - start) / 1000\n                log('Ajax method [%s] took %s seconds', method, time)\n\n                if (isValidCB) self.utils[callback](resdata)\n                if (template) render(template, resdata, time)\n\n                $el.removeClass('loading').removeAttr('disabled')\n            })\n        })\n\n\n        // init render\n        container.find('[render]').not('[submit]').click( e => {\n            const el = e.target\n            const template = el.getAttribute('render')\n            if (!template) return error('Missing template name in [render] attribute of element:', el)\n            render(template)\n        })\n\n\n        // init field dependencies\n        container.find('[deps]').each( (i, el) => {\n            const $el = $(el)\n            const deps = $el.attr('deps')\n            if (deps) deps.split(' ').forEach( field => {\n                $el.closest('[page]').find('[field='+ field +']')\n                    .change( e => { updateBlock($el) })\n            })\n        })\n\n\n        // init actions\n        for (let action of EVENT_ATTRS) {\n            container.find('[on-'+ action +']').each( (i, el) => {\n                const $el = $(el)\n                const methodName = $el.attr('on-' + action)\n                if ( !methodName ) return error('Missing utility method in [on-%s] attribute of element:', action, el)\n                const method = self.utils[methodName]\n                if ( !method ) return error('Undefined utility method \"%s\" declared in [on-%s] attribute of element:', methodName, action, el)\n                $el.on(action, method)\n                   .removeAttr('on-' + action)\n                if (action == 'click') el.style.cursor = 'pointer'\n            })\n        }\n        for (let action of ACTION_ATTRS) {\n            container.find('['+ action +']').each( (i, el) => {\n                const $el = $(el)\n                const $page = $el.closest('[page]')\n                const targetSelector = $el.attr(action)\n\n                if ( !targetSelector ) return error('Missing target selector in [%s] attribute of element:', action, el)\n                let $target = $page.find('['+targetSelector+']')\n                if ( !$target.length ) $target = container.find('['+targetSelector+']')\n                if ( !$target.length ) return error('Could not find target [%s] declared in [%s] attribute of element:', targetSelector, action, el)\n\n                $el.on('click', e => {\n                    const target = $target[0]\n                    if (target.hasAttribute('modal')) $page.find('.page-options').toggleClass('backdrop')\n                    $target[action]()\n                    target.style.display != 'none'\n                        ? target.focus()\n                        : target.blur()\n                })\n            })\n        }\n\n\n        // init pages\n        let page\n        let $page\n        for (let name in self.pages) {\n            page = self.pages[name]\n            if ( !is.object(page) ) return error('pages.%s must be an object!', name)\n            $page = container.find('[page='+ name +']')\n            if ( !$page.length ) return error('No container found for page \"%s\". Please bind one via [page] attribute', name)\n            if (page.init) {\n                if ( !is.function(page.init) ) return error('pages.%s.init must be a function!', name)\n                else {\n                    log('Initializing page [%s]', name)\n                    self.active.page = $page // to allow app.get() etc in page.init\n                    page.init()\n                }\n            }\n        }\n        self.active.page = null // must clear it in case it was assigned\n\n\n        // resolve empty attributes\n        TEXT_ATTRS.forEach( attr => {\n            let $el\n            container.find('['+attr+'=\"\"]').each( (i, el) => {\n                $el = $(el)\n                $el.attr( attr, resolveAttr($el, attr) )\n            })\n        })\n\n\n        // resolve bg images\n        container.find('[img]').each( (i, el) => {\n            let path = resolveAttr($(el), 'img')\n            if (path.indexOf('/')==-1) path = self.options.imgPath + path\n            if (path.charAt(path.length-4)!='.') path += self.options.imgExt\n            el.style['background-image'] = `url(${path})`\n        })\n\n\n        // fix labels\n        NOCHILD_TAGS.forEach( tag => {\n            container.find(tag + '[label]').each( (i, el) => {\n                fixLabel($(el))\n            })\n        })\n\n\n        // fix icons\n        container.find('input[icon]').each( (i, el) => {\n            fixIcon($(el))\n        })\n\n\n        // bind nav handler to popstate event\n        window.onpopstate = e => {\n            var page = e.state || location.hash.substring(1)\n            page\n                ? e.state ? navTo(page, null, true) : navTo(page)\n                : navTo(self.options.root)\n        }\n\n\n        // init history (if applicable)\n        if (self.options.history) initHistory()\n\n\n        // restore and persist state (if applicable)\n        let restored\n        if (self.options.persist) {\n            restored = self.state.restore()\n            $(window).on('beforeunload', e => { self.state.save() })\n        }\n\n        if ( !self.options.persist || !restored ) {\n\n            // set lang (if applicable and not already set)\n            if ( self.options.lang && !self.active.lang ) setLang(self.options.lang)\n            // if no lang, generate texts\n            if ( !self.options.lang ) {\n                container.find('[text]').each( (i, el) => {\n                    $(el).text( $(el).attr('text') )\n                })\n            }\n\n            // set theme (if not already set)\n            if ( !self.active.theme ) setTheme(self.options.theme)\n\n            // nav to page in hash or to root or to first page container\n            const page = location.hash.substring(1) || self.options.root\n            navTo(\n                page && self.pages[page]\n                ? page\n                : container.find('[page]').first().attr('page')\n            )\n        }\n\n\n        // init statefull elements\n        container.find('[state]').each( (i, el) => {\n            const $el = $(el)\n            const prop = resolveAttr($el, 'state')\n\n            if (!prop) return\n\n            if (el.value !== undefined) {\n                // it's an element\n                bindElement($el, prop)\n            }\n            else {\n                // it's a container\n                $el.find('[field]').each( (i, el) => {\n                    const $el = $(el)\n                    const subprop = $el.attr('field')\n                    if (subprop) bindElement($el, prop, subprop)\n                })\n            }\n\n            function bindElement($el, prop, subprop){\n                const root = self.state\n\n                if (subprop) {\n                    // go down one level\n                    root[prop] = root[prop] || {}\n                    root = root[prop]\n                    prop = subprop\n                }\n                if ( root[prop] ) {\n                    // update ui from restored state\n                    $el.val( root[prop] )\n                    if ( $el.attr('block') ) $el.trigger('change')\n                }\n                else {\n                    // first invocation, create empty (sub)prop\n                    root[prop] = ''\n                }\n\n                $el.on('change', e => {\n                    // update state on ui change\n                    root[prop] = $el.val()\n                })\n            }\n        })\n\n\n        // init crud templates\n        container.find('[crud][template]').each( (i, el) => {\n            const $el = $(el)\n            const template = resolveAttr($el, 'template')\n            const datakey = resolveAttr($el, 'data')\n\n            $el.on('click', '.rasti-crud-delete', e => {\n                const value = $(e.currentTarget).closest('[value]').attr('value')\n                if ( value && self.crud.delete(datakey, value) ) {\n                    app.render(template)\n                }\n            })\n\n            $el.on('click', '.rasti-crud-update', e => {\n                // TODO: add update logic\n            })\n\n            $el.on('click', '.rasti-crud-create', e => {\n                self.crud.addInputEl($el)\n                $el.find('.rasti-crud-input').find('input').focus()\n                $(e.currentTarget).parent().addClass('active')\n            })\n\n            $el.on('click', '.rasti-crud-accept', e => {\n                // TODO: finish this\n                /*\n                const newel = crud.genDataEl($el)\n                if (newel && crud.create(datakey, newel) ) {\n                    app.render(template)\n                }\n                */\n                $(e.currentTarget).parent().removeClass('active')\n            })\n\n            $el.on('click', '.rasti-crud-cancel', e => {\n                $(e.currentTarget).parent().removeClass('active')\n                self.crud.removeInputEl($el)\n            })\n        })\n\n\n        // render automatic templates\n        container.find('[auto][template]').each( (i, el) => {\n            render(el)\n        })\n\n\n        // init bound templates\n        container.find('[bind]').each( (i, el) => {\n            bind(el)\n        })\n\n\n        // init move\n        container.find('.movable').each( (i, el) => {\n            $(el).move()\n        })\n\n\n        // init collapse\n        container.find('.collapsable').on('click', e => {\n            e.target.classList.toggle('folded')\n        })\n\n\n        container\n            .on('click', '.backdrop', e => {\n                $(e.target).removeClass('backdrop')\n                self.active.page.find('[modal]').hide()\n            })\n            .removeClass('big loading backdrop')\n\n        const initTime = Math.floor(window.performance.now() - initStart) / 1000\n        log('App [%s] initialized in %ss', self.name, initTime)\n\n    }\n\n\n    function get(selector) {\n        var $els = self.active.page && self.active.page.find('['+ selector +']')\n        if (!$els || !$els.length) $els = container.find('['+ selector +']')\n        if (!$els.length) warn('No elements found for selector [%s]', selector)\n        return $els\n    }\n\n    function set(selector, value) {        \n        var $els = get(selector)\n        $els.each( (i, el) => {\n            el.value = value\n            $(el).change()\n        })\n        return $els\n    }\n\n    function add(selector, ...values) {\n        var $els = get(selector)\n        $els.each( (i, el) => {\n            values.forEach( val => {\n                if (is.array(val)) el.value = el.value.concat(val)\n                else el.value.push(val)\n            })\n            $(el).change()\n        })\n        return $els\n    }\n\n\n    function navTo(pagename, params, skipPushState) {\n\n        if (!pagename) return error('Cannot navigate, page undefined')\n\n        var $prevPage = self.active.page,\n            prevPagename = $prevPage && $prevPage.attr('page'),\n            prevPage = prevPagename && self.pages[prevPagename]\n        \n        if (pagename == prevPagename) return\n\n        var page = self.pages[pagename],\n            $page = container.find('[page='+ pagename +']')\n\n        if (!$page.length) return error('Cannot navigate to page [%s]: page container not found', pagename)\n\n        if ($prevPage) $prevPage.removeClass('active')\n\n        if (prevPage && prevPage.out) {\n            !is.function(prevPage.out)\n                ? warn('Page [%s] {out} property must be a function!', prevPagename)\n                : prevPage.out(params)\n        }\n\n        self.active.page = $page\n\n        if ( params && !is.object(params) ) warn('Page [%s] nav params must be an object!', pagename)\n        if (page && page.in) {\n            !is.function(page.in)\n                ? warn('Page [%s] {in} property must be a function!', pagename)\n                : page.in(params)\n        }\n\n        $page.addClass('active')\n\n        container\n            .find('nav [nav]').removeClass('active')\n            .filter('[nav='+ pagename +']').addClass('active')\n\n        container.trigger('rasti-nav')\n\n        if (skipPushState) return\n        if (page && page.url) {\n            !is.string(page.url)\n                ? warn('Page [%s] {url} property must be a string!', pagename)\n                : window.history.pushState(pagename, null, '#'+page.url)\n        }\n        else {\n            window.history.pushState(pagename, null)\n        }\n    }\n\n\n    function bind(el) {\n        const errPrefix = 'Cannot bind template: '\n        const $el = el.nodeName ? $(el) : el\n        el = $el[0]\n        const src = $el.attr('bind')\n        const $src = container.find('[name='+ src +']')\n        if (!$src.length) return error(errPrefix + 'source element \"%s\" not found, declared in [bind] attribute of el: ', src, el)\n        $el.attr('template', 'bind=' + src)\n        $src.on('change', e => render($el, e.target.value))\n            .trigger('change')\n    }\n\n\n    function render(el, data, time) {\n        let $el, name\n        if ( is.string(el) ) {\n            name = el\n            $el = container.find('[template='+ name +']')\n        }\n        else {\n            $el = el.nodeName ? $(el) : el\n            name = $el.attr('template')\n        }\n        const errPrefix = 'Cannot render template ['+ name +']: '\n        if (!$el.length) return error(errPrefix + 'no element bound to template. Please bind one via [template] attribute.')\n        el = $el[0]\n\n        if (!data) {\n            const datakey = resolveAttr($el, 'data')\n            if (!datakey) return error(errPrefix + 'no data found for template. Please provide in ajax response or via [data] attribute in element:', el)\n            data = self.data[datakey]\n            if (!data) return error(errPrefix + 'undefined data source \"%s\" resolved for element:', datakey, el)\n        }\n        if ( is.string(data) ) data = data.split(', ')\n        if ( !is.array(data) ) return error(errPrefix + 'invalid data provided, must be a string or an array')\n        if (!data.length) return $el.html(`<div msg center textc>${ self.options.noData }</div>`)\n\n        let template = self.templates[name]\n        if (!template || is.string(template)) try {\n            const html = template || $el.html()\n            template = (data, lang) => evalTemplate(html.trim(), data, lang)\n            self.templates[name] = template\n        }\n        catch(err) {\n            return error(errPrefix + 'parsing error: ' + err)\n        }\n        if (!is.function(template)) return error(errPrefix + 'template must be a string or a function')\n\n        const isCrud = el.hasAttribute('crud')\n        if (isCrud) {\n            const el_controls = `\n                <div class=\"rasti-crud right centery small_ round_ inline_\">\n                    <div class=\"rasti-crud-update\" icon=edit></div>\n                    <div class=\"rasti-crud-delete\" icon=close></div>\n                </div>`\n            template = append(template, el_controls)\n        }\n\n        const paging = $el.attr('paging')\n        const lang = self.langs && self.langs[self.active.lang]\n        paging\n            ? initPager($el, template, data, lang)\n            : $el.html( template(data, lang).join('') )\n\n        if (el.hasAttribute('stats')) {\n            const stats = $('<div section class=\"stats\">')\n            stats.html( self.options.stats.replace('%n', data.length).replace('%t', time) )\n            $el.prepend(stats)\n        }\n        if (isCrud) {\n            const container_controls = `\n                <div class=\"rasti-crud right small_ round_ \">\n                    <div class=\"rasti-crud-create\" icon=star></div>\n                    <div class=\"rasti-crud-accept\" icon=ok></div>\n                    <div class=\"rasti-crud-cancel\" icon=nok></div>\n                </div>`\n            $el.prepend(container_controls)\n        }\n        $el.addClass('rendered')\n        if (!paging) applyFX($el)\n\n    }\n\n    function evalTemplate(string, dataArray, lang) {\n        return dataArray.map(data => eval('html`'+string+'`'))\n    }\n\n    function wrap(template, wrapper) {\n        return (data, lang) => template(data, lang).map(html => wrapper.replace('{{content}}', html))\n    }\n\n    function append(template, appendix) {\n        return (data, lang) => template(data, lang).map(html => html.substring(0, html.length-6).concat(appendix + '</div>'))\n    }\n\n    function applyFX($el, selector) {\n        const el = $el[0]\n        const fxkey = $el.attr('fx')\n        if (!fxkey) return\n        const fx = rasti.fx[fxkey]\n        if (!fx) return warn('Undefined fx \"%s\" declared in [fx] attribute of element', fxkey, el)\n        if ( !is.function(fx) ) return error('fx.%s must be a function!', fxkey)\n        if ( selector && !is.string(selector) ) return error('Cannot apply fx, invalid selector provided for el', el)\n        const $target = selector ? $el.find(selector) : $el\n        if (!$target.length) return warn('Cannot apply fx, cannot find target \"%s\" in el', target, el)\n        fx($target)\n    }\n\n\n    function setTheme(themeString) {\n        var themeName = themeString.split(' ')[0],\n            theme = self.themes[themeName],\n            baseTheme = self.themes.base,\n            baseMap = self.themeMaps.dark\n\n        if (!theme) return error('Cannot set theme [%s]: theme not found', themeName)\n\n        var mapName = themeString.split(' ')[1] || ( is.object(theme.maps) && Object.keys(theme.maps)[0] ) || 'dark',\n            themeMap = ( is.object(theme.maps) && theme.maps[mapName] ) || self.themeMaps[mapName]\n\n        if (!themeMap) {\n            warn('Theme map [%s] not found, using default theme map [dark]', mapName)\n            themeMap = baseMap\n            mapName = 'dark'\n        }\n\n        log('Setting theme [%s:%s]', themeName, mapName)\n        self.active.theme = themeName\n        \n        // clone themeMap\n        themeMap = Object.assign({}, themeMap)\n\n        var values = { font : theme.font || baseTheme.font, },\n            colorNames, colors, c1, c2, defaultColorName\n\n        // map palette colors to attributes\n        for (let attr of Object.keys(baseMap)) {\n            colorNames = themeMap[attr] || baseMap[attr]\n            colorNames = [c1, c2] = colorNames.split(' ')\n            colors = [theme.palette[ c1 ], theme.palette[ c2 ]]\n\n            for (let i in colors) {\n                defaultColorName = baseMap[attr].split(' ')[i]\n                if (defaultColorName && !colors[i]) {\n                    // look for color in base palette\n                    colors[i] = baseTheme.palette[ colorNames[i] ]\n                    if (!colors[i]) {\n                        warn('Color [%s] not found in theme nor base palette, using it as is', colorNames[i])\n                        colors[i] = colorNames[i]\n                        /*\n                        warn('Mapping error in theme [%s] for attribute [%s]. Color [%s] not found. Falling back to default color [%s].', themeName, attr, colorNames[i], defaultColorName)\n                        colors[i] = baseTheme.palette[ defaultColorName ]\n                        */\n                    }\n                }\n            }\n\n            values[attr] = colors\n            if (themeMap[attr]) delete themeMap[attr]\n        }\n\n        var invalidKeys = Object.keys(themeMap)\n        if (invalidKeys.length) warn('Ignored %s invalid theme map keys:', invalidKeys.length, invalidKeys)\n\n        // generate theme style and apply it\n        container.find('style[theme]').html( getThemeStyle(values) )\n\n        // apply bg colors\n        var colorName, color\n        container.find('[bg]').each( (i, el) => {\n            colorName = el.getAttribute('bg')\n            color = theme.palette[colorName] || baseTheme.palette[colorName]\n            if (color) el.style['background-color'] = color\n            else warn('Invalid color [%s] declared in el:', colorName, el)\n        })\n    }\n\n\n    function setLang(langName) {\n        var lang = self.langs[ langName ],\n            errPrefix = 'Cannot set lang [%s]: '\n\n        if (!lang) return error(errPrefix + 'lang not found', langName)\n        if ( !is.object(lang) ) return error(errPrefix + 'lang must be an object!', langName)\n\n        log('Setting lang [%s]', langName)\n        self.active.lang = langName\n\n        var $elems = $(), $el, keys, string\n        \n        TEXT_ATTRS.forEach( attr => {\n            $elems = $elems.add('['+attr+']')\n        })\n\n        $elems.each( (i, el) => {\n            if (el.hasAttribute('fixed')) el = el.children[0]\n            $el = $(el)   \n            keys = el.langkeys\n\n            if (!keys) {\n                keys = {}\n                attributes.forEach( attr => {\n                    if ($el.attr(attr)) keys[attr] = $el.attr(attr)\n                })\n                el.langkeys = keys\n            }\n\n            for (let attr in keys) {\n                string = getString(langName, keys[attr])\n                attr === 'text'\n                    ? $el.text(string || keys[attr])\n                    : string ? $el.attr(attr, string) : null\n            }\n        })\n\n        Object.keys(self.defaults).forEach( key => {\n            self.options[key] = lang['rasti_'+key] || self.defaults[key]\n        })\n    }\n\n\n    function updateBlock($el, data) {\n        var types = {\n            SELECT : 'select',\n            OL : 'list',\n            UL : 'list',\n        }\n        var el = $el[0]\n        var type = types[el.nodeName] || $el.attr('block')\n        if (!type) return error('Missing block type in [block] attribute of element:', el)\n        \n        var block = rasti.blocks[type]\n        if (!block) return error('Undefined block type \"%s\" resolved for element:', type, el)\n        \n        if (!data) {\n            var datakey = resolveAttr($el, 'data')\n            if (!datakey) return\n\n            data = self.data[datakey]\n            if (!data) return error('Undefined data source \"%s\" resolved for element:', datakey, el)\n        }\n\n        // TODO: this should be in multi block, not here\n        var $options = type === 'multi'\n            ? $el.closest('[page]').find('[options='+ $el.attr('field') +']')\n            : $el\n\n        var deps = $el.attr('deps')\n        var depValues = {}\n        if (deps) deps.split(' ').forEach( field => {\n            depValues[field] = get('field='+field).val()\n        })\n\n        is.function(data)\n            ? data(render, depValues)\n            : render(data)\n        \n        function render(data) {\n            if ( is.string(data) ) data = data.split(', ')\n            $options.html( block.template(data, $el) )\n\n            if (invalidData) {\n                var field = $el.attr('field'),\n                    page = $el.closest('[page]').attr('page')\n                warn('Detected %s invalid data entries for field [%s] in page [%s]', invalidData, field, page)\n                invalidData = 0\n            }\n        }\n\n\n    }\n\n\n    function toggleFullScreen(e) {\n        var prefixes = 'moz webkit'.split(' ')\n        prefixes.forEach( p => {\n            if ( ! (p + 'FullscreenElement' in document) ) return\n            if ( !document[ p + 'FullscreenElement' ]) {\n                document.documentElement[ p + 'RequestFullScreen' ]();\n            }\n            else if (document[ p + 'CancelFullScreen' ]) {\n                document[ p + 'CancelFullScreen' ]();\n            }\n        })\n    }\n\n\n    // internal utils\n\n    \n    function createTabs($el) {\n        var el = $el[0],\n            $tabs = el.hasAttribute('page')\n                ? $el.children('[panel]:not([modal])')\n                : el.hasAttribute('panel')\n                    ? $el.children('[section]:not([modal])')\n                    : undefined\n        if (!$tabs) return error('[tabs] attribute can only be used in pages or panels, was found in element:', el)\n\n        var $labels = $('<div class=\"tab-labels\">'),\n            $bar = $('<div class=\"bar\">'),\n            $tab, label, position\n\n        $tabs.each( (i, tab) => {\n            $tab = $(tab)\n            $tab.attr('tab', i)\n            label = resolveAttr($tab, 'tab-label') || 'TAB ' + (i+1)\n\n            $labels.append($(`<div tab-label=${i} text=\"${ label }\">`))\n        })\n\n        $labels.append($bar).prependTo($el)\n        var $flow = $tabs.wrapAll('<div h-flow>').parent()\n\n        $labels.on('click', e => {\n            var $label = $(e.target),\n                tabnr = $label.attr('tab-label'),\n                $tab = $tabs.filter(`[tab=\"${ tabnr }\"]`)\n\n            $tabs.removeClass('active')\n            $tab.addClass('active')[0].scrollIntoView()\n\n            $labels.children().removeClass('active')\n            $label.addClass('active')\n            \n        })\n\n        $flow.on('scroll', e => {\n            position = this.scrollLeft / this.scrollWidth\n            $bar.css({ left : position * this.offsetWidth })\n        })\n\n        container.on('rasti-nav', e => {\n            if (!isInActivePage($el)) return\n            $bar.css({ width : $flow[0].offsetWidth / $tabs.length })\n            if (!$labels.children('.active').length) $labels.children().first().click()\n        })\n\n        $(window).on('resize', e => {\n            if (!isInActivePage($el)) return\n            $labels.find('.active').click()\n            $bar.css({ width : $flow[0].offsetWidth / $tabs.length })\n        })\n\n        function isInActivePage($el) {\n            return self.active.page.find($el).length\n                || self.active.page.attr('page') === $el.attr('page')\n        }\n\n    }\n    \n\n    function initBlock($el) {\n        var el = $el[0]\n        var type = el.nodeName == 'SELECT' ? 'select' : $el.attr('block')\n        if (!type) return error('Missing block type in [block] attribute of element:', el)\n        \n        var block = rasti.blocks[type]\n        if (!block) return error('Undefined block type \"%s\" declared in [block] attribute of element:', type, el)\n\n        if (!is.function(block.init)) return error('Invalid or missing init function in block type \"%s\" declared in [block] attribute of element:', type, el)\n\n        block.init($el)\n\n        // if applicable, create options from data source\n        if (el.hasAttribute('data')) updateBlock($el)\n    }\n\n\n    function initHistory() {\n        self._history = new History()\n\n        Object.defineProperty(self, 'history', { get: () => self._history.content })\n        Object.defineProperties(self.history, {\n            back : { value : self._history.back },\n            forth : { value : self._history.forth },\n        })\n    }\n\n\n    function initPager($el, template, data, lang) {\n        var name = $el.attr('template'),\n            page_size = parseInt($el.attr('paging')),\n            pager = newPager(name, data, page_size),\n            paging, columns, sizes, col=1, size=0\n\n        if ($el[0].hasAttribute('columns')) columns = `<button btn icon=columns />`\n\n        if (pager.total > 1) paging = `<div class=\"paging inline inline_\">\n                <button btn icon=prev />\n                <span class=page />\n                <button btn icon=next />\n            </div>`\n\n        sizes = `<button btn icon=rows />`\n\n        $el.html(`\n            <div class=\"results scrolly\"></div>\n            <div class=\"controls centerx bottom ib_\">\n                ${ columns || '' }\n                ${ paging || '' }\n                ${ sizes }\n            </div>\n        `)\n\n        $controls = $el.children('.controls')\n        $results = $el.children('.results')\n\n        $controls.on('click', '[icon=next]', e => {\n            update( pager.next() )\n        })\n\n        $controls.on('click', '[icon=prev]', e => {\n            update( pager.prev() )\n        })\n\n        $controls.on('click', '[icon=rows]', e => {\n            size += 1\n            var newSize = pager.sizes[size % pager.sizes.length]\n            pager.setPageSize(newSize)\n            $(e.target).html(newSize)\n            update( pager.next() )\n            pager.total > 1\n                ? $controls.find('.paging').show()\n                : $controls.find('.paging').hide()\n        })\n\n        $controls.on('click', '[icon=columns]', e => {\n            col = col+1 > 3 ? 1 : col+1\n            $(e.target).html(col)\n            $results.removeClass('columns-1 columns-2 columns-3')\n                .addClass('columns-' + col)\n        })\n\n        update( pager.next() )\n\n        function update(data){\n            $results.html( template(data, lang).join('') )\n            $controls.find('.page').html(pager.page + '/' + pager.total)\n            applyFX($el, '.results')\n        }\n    }\n\n    function getPager(id) {\n        let pager = self.pagers.get(id)\n        if (!pager) error('No pager found for template [%s]', id)\n        return pager\n    }\n    function newPager(id, results, page_size) {\n        let pager = new Pager(id, results, page_size)\n        self.pagers.set(id, pager)\n        return pager\n    }\n    function deletePager(pager) {\n        if (!pager || !pager.id) return\n        self.pagers.delete(pager.id)\n    }\n\n\n    function submitAjax(method, callback) {\n        var ajax = self.ajax[ method ]\n        if ( !is.function(ajax) ) return error('Ajax method ['+ method +'] is not defined')\n\n        var $form = container.find('[ajax='+ method +']')\n        if (!$form.length) return error('No container element bound to ajax method [%s]. Please bind one via [ajax] attribute', method)\n\n        var reqdata = {}, field\n        $form.find('[field]').each( (i, el) => {\n            $el = $(el)\n            field = $el.attr('field')\n            if (field) {\n                reqdata[field] = $el.val() || $el.attr('value')\n            }\n        })\n\n        ajax(reqdata, callback)\n    }\n\n\n    function getThemeStyle(values) {\n        var ns = `[rasti=${ self.name }]`\n        return `\n            ${ns} {\n                font: ${ values.font };\n                color: ${ values.text[0] };\n                background-color: ${ values.page[0] };\n            }\n            ${ns} [page]    { background-color: ${ values.page[0] }; }\n            ${ns} [panel]   { background-color: ${ values.panel[0] }; }\n            ${ns} [section] { background-color: ${ values.section[0] }; }\n\n            ${ns} [page][header]:before,\n            ${ns} [page][footer]:after     { background-color: ${ values.page[1] }; }\n            ${ns} [panel][header]:before   { background-color: ${ values.panel[1] }; }\n            ${ns} [section][header]:before { background-color: ${ values.section[1] }; }\n\n            ${ns} .tab-labels        { background-color: ${ values.panel[0] }; }\n            ${ns} .tab-labels > .bar { background-color: ${ values.btn[0] }; }\n\n            ${ns} [field] {\n                background-color: ${ values.field[0] };\n                color: ${ values.field[1] };\n            }\n\n            ${ns} [btn],\n            ${ns} .btn,\n            ${ns} [block=buttons] > div,\n            ${ns} nav > div.active,\n            ${ns} nav > a.active,\n            ${ns} .list > div.active {\n                background-color: ${ values.btn[0] };\n                color: ${ values.btn[1] }; \n            }\n\n            ${ns} [header]:before { color: ${ values.header[0] }; }\n            ${ns} [label]:not([header]):before  { color: ${ values.label[0] }; }\n        `\n    }\n\n\n    function getString(lang, key) {\n        if ( !is.object(self.langs[lang]) ) {\n            error('Lang [%s] is not defined', lang)\n            return\n        }\n        var string = self.langs[lang][key]\n        if ( !is.string(string) ) warn('Lang [%s] does not contain key [%s]', lang, key)\n        else return string\n    }\n\n\n    function fixLabel($el) {\n        var $div = $(`<div fixed label=\"${ $el.attr('label') }\" >`)\n        $el.wrap($div)\n        $el[0].removeAttribute('label')\n    }\n\n\n    function fixIcon($el) {\n        var $div = $(`<div icon=${ $el.attr('icon') } class=floating >`)\n        $el.wrap($div)\n        $el[0].removeAttribute('icon')\n    }\n\n\n    function setImg($el, basepath) {\n        $el.css('background-image', 'url('+ basepath + ($el.val() || $el.attr('value')) +'.png)')\n    }\n\n\n    // api\n\n    return {\n        // objects\n        options : this.options,\n        history : this.history,\n        state : this.state,\n        pages : this.pages,\n        data : this.data,\n        ajax : this.ajax,\n        utils : this.utils,\n        langs : this.langs,\n        themes : this.themes,\n        themeMaps : this.themeMaps,\n        templates : this.templates,\n\n        // methods\n        extend,\n        init,\n        get,\n        set,\n        add,\n        navTo,\n        render,\n        setLang,\n        setTheme,\n        updateBlock,\n        toggleFullScreen,\n    }\n\n}\n\n\n// static properties and methods\nrasti.log = log\nrasti.warn = warn\nrasti.error = error\nrasti.utils = utils\nrasti.blocks = require('./blocks/all')\nrasti.icons = require('./icons')\nrasti.fx = {\n\n    stack : $el => {\n        $el.addClass('fx-stack-container')\n        const $children = $el.children()\n        $children.each( (i, el) => {\n            el.classList.add('fx-stack-el')\n            setTimeout( _ => {\n                el.classList.remove('fx-stack-el')\n            }, i * 50);\n        })\n        setTimeout( _ => {\n            $el.removeClass('fx-stack-container')\n        }, $children.length * 50 + 500);\n\n    },\n\n    stamp : $el => {\n        $el.addClass('fx-stamp-container')\n        const $children = $el.children()\n        $children.each( (i, el) => {\n            el.classList.add('fx-stamp-el')\n            setTimeout( _ => {\n                el.classList.remove('fx-stamp-el')\n            }, i * 40);\n        })\n        setTimeout( _ => {\n            $el.removeClass('fx-stamp-container')\n        }, $children.length * 40 + 500);\n    },\n\n}\nrasti.options = {log : 'debug'}\n\nmodule.exports = Object.freeze(rasti)\n\n\n\n// bootstrap any apps declared via rasti attribute\nfunction bootstrap() {\n    var appContainers = $(document).find('[rasti]'),\n        appName, app, extendProps\n\n    if (appContainers.length) appContainers.forEach( container => {\n        appName = container.getAttribute('rasti')\n        if (!appName) error('Missing app name in [rasti] attribute of app container:', container)\n        else if (global[appName]) error('Name [%s] already taken, please choose another name for app in container:', appName, container)\n        else {\n            log('Creating app [%s]...', appName)\n            global[appName] = app = new rasti(appName, container)\n            Object.keys(app.options).forEach( key => {\n                if (container.hasAttribute(key)) {\n                    app.options[key] = container.getAttribute(key)\n                    // non-value boolean attributes are true\n                    if (is.boolean(options[key]) && !app.options[key]) app.options[key] = true\n                }\n            })\n            // load any declared sources\n            var sources = container.getAttribute('src')\n            if (sources) {\n                log('Loading sources for app [%s]...', appName)\n                utils.inject(sources)\n            }\n        }\n    })\n}\n\n\nfunction genBlockStyles() {\n    let styles = ['<style blocks>'], style\n    for (let key in rasti.blocks) {\n        style = rasti.blocks[key].style\n        if (style) styles.push(style)\n    }\n    styles.push('</style>')\n    $('head').prepend(styles.join(''))\n}\n\n\nfunction genIconStyles() {\n    let styles = ['<style icons>'], glyph\n    for (let category in rasti.icons) {\n        category = rasti.icons[category]\n        for (let name in category) {\n            glyph = category[name]\n            style = `[icon=${name}]:before{content:'${glyph}';}`\n            styles.push(style)\n        }\n    }\n    styles.push('</style>')\n    $('head').prepend(styles.join(''))\n}\n\n\n$('head').prepend(`<style>rasti.css</style>`)\n\ngenBlockStyles()\n\ngenIconStyles()\n\nbootstrap()\n",
    "exports.themes = {\n\n    base : {\n        font : 'normal 14px Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols, EmojiOne Mozilla',\n        palette : {\n            white   : '#fff',\n            lighter : '#ddd',\n            light   : '#bbb',\n            mid     : '#888',\n            dark    : '#444',\n            darker  : '#222',\n            black   : '#000',\n            detail  : 'darkcyan',\n            lighten : 'rgba(255,255,255,0.5)',\n            darken  : 'rgba(0,0,0,0.2)',\n        },\n    },\n\n}\n\n\nexports.themeMaps = {\n\n    dark : {\n        page    : 'darker lighten', // bg, header bg\n        panel   : 'dark lighten',   // bg, header bg\n        section : 'mid lighten',    // bg, header bg\n        field   : 'light darker',   // bg, text\n        btn     : 'detail darker',  // bg, text\n        header  : 'darker',         // text\n        label   : 'darker',         // text\n        text    : 'darker',         // text\n    },\n\n    light : {\n        page    : 'lighter darken',\n        panel   : 'mid lighten',\n        section : 'light darken',\n        field   : 'lighter dark',\n        btn     : 'detail light',\n        header  : 'dark',\n        label   : 'mid',\n        text    : 'darker',\n    },\n    \n}",
    "const is = {}\n'object function array string number regex boolean'.split(' ').forEach(function(t){\n    is[t] = function(exp){ return type(exp) === t }\n})\nfunction type(exp) {\n        var clazz = Object.prototype.toString.call(exp)\n        return clazz.substring(8, clazz.length-1).toLowerCase()\n}\nfunction sameType(exp1, exp2) {\n    return type(exp1) === type(exp2)\n}\n\n\nfunction inject(sources) {\n    if (is.string(sources)) sources = sources.split(' ')\n    if (!is.array(sources)) return error('Invalid sources, must be an array or a string')\n    var script,\n        body = $('body'),\n        inject = (sources) => {\n            script = $('<script>').attr('src', sources.shift())\n            if (sources.length) script.attr('onload', () => inject(sources))\n            body.append(script)\n        }\n    inject(sources)\n}\n\n\nfunction checkData(data) {\n    switch (typeof data) {\n    case 'string':\n        data = {value: data, label: data, alias: data.toLowerCase()}\n        break\n    case 'object':\n        if ( !is.string(data.value) || !is.string(data.label) ) {\n            error('Invalid data object (must have string properties \"value\" and \"label\"):', data)\n            invalidData++\n            data = {value: '', label: 'INVALID DATA', alias: ''}\n        }\n        else if ( !is.string(data.alias) ) {\n            if (data.alias) {\n                error('Invalid data property \"alias\" (must be a string):', data)\n                invalidData++\n            }\n            data.alias = data.value.toLowerCase()\n        }\n        else data.alias = data.alias.toLowerCase() +' '+ data.value.toLowerCase()\n        break\n    default:\n        error('Invalid data (must be a string or an object):', data)\n        invalidData++\n        data = {value: '', label: 'INVALID DATA', alias: ''}\n    }\n    return data\n}\n\n\nfunction html(templateObject, ...substs) {\n    // Use raw template strings (don’t want backslashes to be interpreted)\n    const raw = templateObject.raw\n    let result = ''\n\n    substs.forEach((subst, i) => {\n        let lit = raw[i]\n        // Turn array into string\n        if ( is.array(subst) ) subst = subst.join('')\n        // If subst is preceded by an !, escape it\n        if ( lit.endsWith('!') ) {\n            subst = htmlEscape(subst)\n            lit = lit.slice(0, -1)\n        }\n        result += lit\n        result += subst\n    })\n    // Take care of last template string\n    result += raw[raw.length - 1]\n\n    return result\n}\n\n\nfunction htmlEscape(str) {\n    return str.replace(/&/g, '&amp;') // first!\n        .replace(/>/g, '&gt;')\n        .replace(/</g, '&lt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/`/g, '&#96;')\n}\n\n\n\nfunction resolveAttr($el, name) {\n    var value = $el.attr(name) || $el.attr('name') || $el.attr('field') || $el.attr('nav') || $el.attr('template') ||  $el.attr('section') || $el.attr('panel') || $el.attr('page')\n    if (!value) warn('Could not resolve value of [%s] attribute in el:', name, $el[0])\n    return value\n}\n\n\nfunction rastiError(msg, ...args){\n    this.msg = msg\n    this.el = args.pop()\n    this.args = args\n}\n\n\nfunction random() {\n    return (Math.random() * 6 | 0) + 1\n}\n\n\nfunction onMobile() {\n    return window.innerWidth < 500\n}\n\n\nmodule.exports = {\n    is,\n    type,\n    sameType,\n    inject,\n    checkData,\n    html,\n    resolveAttr,\n    random,\n    onMobile,\n    rastiError,\n}\n"
  ]
}