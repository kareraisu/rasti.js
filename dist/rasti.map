{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/blocks/all.js",
    "src/blocks/buttons.js",
    "src/blocks/checks.js",
    "src/blocks/multi.js",
    "src/blocks/radios.js",
    "src/blocks/select.js",
    "src/rasti.js",
    "src/utils.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvqCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "module.exports = {\r\n\tbuttons : require('./buttons'),\r\n\tchecks  : require('./checks'),\r\n\tradios  : require('./radios'),\r\n\tmulti   : require('./multi'),\r\n\tselect  : require('./select'),\r\n}",
    "const utils = require('../utils')\r\n\r\nmodule.exports = {\r\n\r\ntemplate : function(data, $el) {\r\n    var ret = ''\r\n    for (var d of data) {\r\n        d = utils.checkData(d)\r\n        ret += `<div value=\"${d.value}\">${d.label}</div>`\r\n    }\r\n    return ret\r\n},\r\n\r\ninit : function($el) {\r\n    $el.find('div').click(function(e) {\r\n        var $el = $(this)\r\n        $el.parent()\r\n            .val($el.attr('value'))\r\n            .trigger('change')\r\n    })\r\n    $el.change(function(e) {\r\n        var $el = $(this)\r\n        $el.children().removeClass('active')\r\n        $el.find('[value=\"'+ $el.val() +'\"]').addClass('active')\r\n    })\r\n},\r\n\r\nstyle : `\r\n    [block=buttons] > div {\r\n        display: inline-block;\r\n        margin: 5px !important;\r\n        padding: 5px 10px;\r\n        border-radius: 6px;\r\n        border: 2px outset rgba(255, 255, 255, 0.5);\r\n        background-clip: padding-box;\r\n        cursor: pointer;\r\n    }\r\n    [block=buttons] > div.active {\r\n        filter: contrast(1.5);\r\n        border-style: inset;\r\n        padding: 4px 11px 6px 9px;\r\n        transform: translateY(-1px);\r\n    }\r\n`\r\n\r\n}\r\n",
    "const utils = require('../utils')\r\n\r\nmodule.exports = {\r\n\r\ntemplate : function(data, $el) {\r\n    var uid = utils.random()\r\n    var ret = ''\r\n    for (var d of data) {\r\n        d = utils.checkData(d)\r\n        ret += `<div>\r\n            <input type=\"checkbox\" name=\"${uid}[]\" value=\"${d.value}\">\r\n            <label>${d.label}</label>\r\n        </div>`\r\n    }\r\n    return ret\r\n},\r\n\r\ninit : function($el) {\r\n    $el[0].value = []\r\n    $el.find('input').change(function(e) {\r\n        var $el = $(this),\r\n            val = $el.attr('value'),\r\n            values = $el.closest('[block=checks]')[0].value\r\n        if ($el.prop('checked')) {\r\n            values.push(val)\r\n        }\r\n        else {\r\n            values.remove(val)\r\n        }\r\n    })\r\n    $el.find('input +label').click(function(e) {\r\n        var $el = $(this)\r\n        $el.prev().click()\r\n    })\r\n    $el.change(function(e) {\r\n        var $el = $(this), $input, checked\r\n        $el.find('input').each(function(i, input){\r\n            $input = $(input)\r\n            checked = $el[0].value.includes($input.attr('value'))\r\n            $input.prop('checked', checked)\r\n        })\r\n    })\r\n},\r\n\r\nstyle : `\r\n    [block=checks]>div {\r\n        height: 24px;\r\n        padding-top: 5px\r\n    }\r\n`\r\n\r\n}",
    "const utils = require('../utils')\r\n\r\nmodule.exports = {\r\n\r\ntemplate : function(data, $el) {\r\n    var ret = $el[0].hasAttribute('filter')\r\n        ? `<input field type=\"text\" placeholder=\"${ $el.attr('filter') || self.options.multiFilterText }\"/>`\r\n        : ''\r\n    for (var d of data) {\r\n        d = utils.checkData(d)\r\n        ret += `<option value=\"${d.value}\" alias=\"${d.alias}\">${d.label}</option>`\r\n    }\r\n    return ret\r\n},\r\n\r\ninit : function($el) {\r\n    var el = $el[0],\r\n        field = $el.attr('field'),\r\n        $options = $el.closest('[page]').find('[options='+ field +']'),\r\n        initialized = utils.is.number(el.total)\r\n    \r\n    el.value = []\r\n    el.total = $options.children().length\r\n    el.max = parseInt($el.attr('max'))\r\n\r\n    if (initialized) {\r\n        // empty selected options (and remove full class in case it was full)\r\n        $el.find('[selected]').empty()\r\n        $el.removeClass('full')\r\n        // then exit (skip structure and bindings)\r\n        return\r\n    }\r\n\r\n    // structure\r\n\r\n    $el.prepend('<div add>')\r\n    $el.append('<div selected>')\r\n    var $selected = $el.find('[selected]')\r\n\r\n    // bindings\r\n\r\n    $el.on('click', function(e) {\r\n        $options.siblings('[options]').hide() // hide other options\r\n        if ( utils.onMobile() ) $options.parent().addClass('backdrop')\r\n        $options.css('left', this.getBoundingClientRect().right).show()\r\n        $options.find('input').focus()\r\n    })\r\n\r\n    $el.closest('[page]').on('click', '*:not(option)', function(e) {\r\n        if ( $(e.target).attr('field') === field\r\n          || $(e.target).parent().attr('field') === field ) return\r\n        if ( utils.onMobile() ) $options.parent().removeClass('backdrop')\r\n        $options.hide()\r\n    })\r\n\r\n    var toggleOption = function(e) {\r\n        e.stopPropagation()\r\n        $options.find('input').focus()\r\n        var $opt = $(e.target),\r\n            val = $opt.attr('value'),\r\n            values = $el[0].value\r\n\r\n        if ($opt.parent().attr('options')) {\r\n            // select option\r\n            $el.find('[selected]').append($opt)\r\n            values.push(val)\r\n        }\r\n        else {\r\n            // unselect option\r\n            $options.append($opt)\r\n            values.remove(val)\r\n        }\r\n        checkFull()\r\n        $el.trigger('change', {ui: true}) \r\n    }\r\n\r\n    $el.on('click', 'option', toggleOption)\r\n\r\n    $options.on('click', 'option', toggleOption)\r\n\r\n    $options.on('click', function(e) { $options.find('input').focus() })\r\n\r\n    $options.on('input', 'input', function(e) {\r\n        this.value\r\n            ? $options.find('option').hide().filter('[alias*='+ this.value +']').show()\r\n            : $options.find('option').show()\r\n    })\r\n\r\n    $el.on('change', function(e, params){\r\n        if (params && params.ui) return // triggered from ui, do nothing\r\n        $selected.children().each(function(i, el) {\r\n            $options.append(el)\r\n        })\r\n        for (var val of el.value) {\r\n            $selected.append($options.find('[value='+ val +']'))\r\n            if ( checkFull() ) break\r\n        }\r\n    })\r\n\r\n    function checkFull() {\r\n        var qty = $selected.children().length,\r\n            dif = el.value.length - qty,\r\n            isFull = qty >= (el.max || el.total)\r\n\r\n        if (isFull) {\r\n            if (dif > 0) {\r\n                el.value = el.value.slice(0, qty)\r\n                rasti.warn('Dropped %s overflowed values in el:', dif, el)\r\n            }\r\n            $el.addClass('full')\r\n            if ( utils.onMobile() ) $options.parent().removeClass('backdrop')\r\n            $options.hide()\r\n        }\r\n        else {\r\n            $el.removeClass('full')\r\n        }\r\n\r\n        return isFull\r\n    }\r\n},\r\n\r\nstyle : `\r\n    [block=multi] {\r\n        position: relative;\r\n        min-height: 35px;\r\n        padding-right: 20px;\r\n        text-shadow: 0 0 0 #000;\r\n        cursor: pointer;\r\n    }\r\n    [block=multi] [add] {\r\n        display: flex;\r\n        align-items: center;\r\n        position: absolute;\r\n        right: 0;\r\n        top: 0;\r\n        height: 100%;\r\n        width: 20px;\r\n        border-left: 1px solid rgba(0,0,0,0.2);\r\n    }\r\n    [block=multi] [add]:before {\r\n        content: '〉';\r\n        padding-top: 2px;\r\n        padding-left: 6px;\r\n    }\r\n    [block=multi].open [add] {\r\n        box-shadow: inset 0 0 2px #000;\r\n    }\r\n    [block=multi].full {\r\n        padding-right: 5px;\r\n    }\r\n    [block=multi].full [add] {\r\n        display: none;\r\n    }\r\n    [block=multi] option {\r\n        padding: 2px 0;\r\n    }\r\n    [block=multi] option:before {\r\n        content: '✕';\r\n        display: inline-block;\r\n        box-sizing: border-box;\r\n        height: 20px;\r\n        width: 20px;\r\n        margin-right: 5px;\r\n        border-radius: 50%;\r\n        text-align: center;\r\n        line-height: 1.5;\r\n    }\r\n    [block=multi] [selected] {\r\n        max-height: 100px;\r\n        overflow-y: auto;\r\n    }\r\n    [block=multi] [selected]>option:hover:before {\r\n        color: #d90000;\r\n        background-color: rgba(255, 0, 0, 0.5);\r\n    }\r\n    [block=multi][options] {\r\n        display: none;\r\n        position: absolute;\r\n        top: 0;\r\n        width: 250px;\r\n        height: 100%;\r\n        padding: 5px 10px;\r\n        border: 1px solid;\r\n        z-index: 10;\r\n        overflow-y: auto;\r\n    }\r\n    [block=multi][options]>option:before {\r\n        transform: rotate(45deg);\r\n    }\r\n    [block=multi][options]>option:hover:before {\r\n        color: #008000;\r\n        background-color: rgba(0, 128, 0, 0.5);\r\n    }\r\n    [block=multi][options] input {\r\n        border: 1px solid #000;\r\n        margin: 10px 0;\r\n    }\r\n\r\n`\r\n\r\n}",
    "const utils = require('../utils')\r\n\r\nmodule.exports = {\r\n\r\ntemplate : function(data, $el) {\r\n    var uid = utils.random()\r\n    var ret = ''\r\n    for (var d of data) {\r\n        d = utils.checkData(d)\r\n        ret += `<div>\r\n            <input type=\"radio\" name=\"${uid}[]\" value=\"${d.value}\">\r\n            <label>${d.label}</label>\r\n        </div>`\r\n    }\r\n    return ret\r\n},\r\n\r\ninit : function($el) {\r\n    $el.find('input').change(function(e) {\r\n        var $el = $(this)\r\n        $el.closest('[block=radios]').val($el.attr('value'))\r\n    })\r\n    $el.find('input +label').click(function(e) {\r\n        var $el = $(this)\r\n        $el.prev().click()\r\n    })\r\n    $el.change(function(e) {\r\n        var $el = $(this)\r\n        $el.find('[value=\"'+ $el.val() +'\"]').prop('checked', true)\r\n    })\r\n},\r\n\r\nstyle : `\r\n    [block=radios]>div {\r\n        height: 24px;\r\n        padding-top: 5px\r\n    }\r\n`\r\n\r\n}",
    "const utils = require('../utils')\r\n\r\nmodule.exports = {\r\n\r\ntemplate : function(data, $el) {\r\n    var ret = ''\r\n    for (var d of data) {\r\n        d = utils.checkData(d)\r\n        ret += `<option value=\"${d.value}\">${d.label}</option>`\r\n    }\r\n    return ret\r\n},\r\n\r\ninit : function($el) {\r\n    var imgpath = $el.attr('img')\r\n    if (!imgpath) return\r\n\r\n    var $selected = $el.find('[selected]'),\r\n        $wrapper = $('<div select>'),\r\n        $options = $('<div options>')\r\n\r\n    // clone original select\r\n    $.each($el[0].attributes, function() {\r\n        $wrapper.attr(this.name, this.value);\r\n    });\r\n\r\n    // wrap with clone\r\n    $el.wrap($wrapper)\r\n    // regain wrapper ref (it is lost when wrapping)\r\n    $wrapper = $el.parent()\r\n    // add caret\r\n    $wrapper.append('<div caret>&#9660</div>')\r\n\r\n    if (!$el.attr('data')) {\r\n        // clone original options\r\n        $el.find('option').each(function(opt, i) {\r\n            $options.append(`<div value=\"${opt.value}\">${opt.innerHTML}</div>`)\r\n        })\r\n    }\r\n    // add options\r\n    $wrapper.append($options)\r\n    // replace ref with divs\r\n    $options = $options.children()\r\n\r\n    // recreate selected option, if none select first one\r\n    var i = $selected.length ? $selected.index() : 0\r\n    $options[i].classList.add('selected')\r\n    // recreate select value\r\n    $wrapper.val($el.val() || $options[i].getAttribute('value'))\r\n\r\n    // add images\r\n    setImg($wrapper, imgpath)\r\n    $options.each(function(i, el) {\r\n        setImg($(el), imgpath)\r\n    })\r\n\r\n    // bind clicks\r\n    $options.click(function(e) {\r\n        var $opt = $(this)\r\n        $opt.siblings().removeClass('selected')\r\n        $opt.addClass('selected')\r\n        var $wrapper = $opt.closest('[select]')\r\n        $wrapper.val($opt.attr('value'))\r\n        var imgpath = $wrapper.attr('img')\r\n        if (imgpath) setImg($wrapper, imgpath)\r\n    })\r\n\r\n    // remove original select\r\n    $el.remove()\r\n\r\n},\r\n\r\nstyle : `\r\n    [select] select {\r\n        display: none;\r\n    }\r\n    [select] {\r\n        cursor: pointer;\r\n        border-radius: 4px;\r\n    }\r\n    [select]:hover [options] {\r\n        display: block;\r\n    }\r\n    [select] [options] {\r\n        display: none;\r\n        position: absolute;\r\n        margin-top: 42px;\r\n        margin-left: -4px;\r\n        border: 4px solid #b9b9b9;\r\n        border-radius: 4px;\r\n    }\r\n    [select] [options] div:hover {\r\n        border: 4px solid #fff;\r\n    }\r\n    [select] [options] div.selected {\r\n        border: 2px solid #0f97bd;\r\n    }\r\n    [select] [caret] {\r\n        float: right;\r\n        margin-top: 15px;\r\n        margin-right: 5px;\r\n        font-size: small;\r\n    }\r\n    [select][img] {\r\n        padding: 0;\r\n    }\r\n`\r\n\r\n}\r\n",
    "/** zepto */\r\n\r\nvar utils = require('./utils'),\r\n    is = utils.is,\r\n    type = utils.type,\r\n    sameType = utils.sameType\r\n\r\nvar options = {\r\n    persist : false,\r\n    history : false,\r\n    root    : '',\r\n    theme   : 'base',\r\n    lang    : '',\r\n    stats   : '%n results in %t seconds',\r\n    noData  : 'No data available',\r\n}\r\n\r\nvar breakpoints = {\r\n    phone : 500,\r\n    tablet : 800,\r\n}\r\nvar media = {}\r\nfor (var device in breakpoints) {\r\n    media[device] = window.matchMedia(`(max-width: ${ breakpoints[device] }px)`).matches\r\n}\r\n\r\nvar log = function (...params) {\r\n        if (rasti.options.log.search(/debug/i) != -1) console.log.call(this, ...params)\r\n    },\r\n    warn = function (...params) {\r\n        if (rasti.options.log.search(/(warn)|(debug)/i) != -1) console.warn.call(this, ...params)\r\n    },\r\n    error = function (...params) {\r\n        console.error.call(this, ...params)\r\n    }\r\n\r\n\r\nvar rasti = function(name, container) {\r\n\r\n    var errPrefix = 'Cannot create rasti app: '\r\n\r\n    if ( !is.string(name) ) return error(errPrefix + 'app must have a name!')\r\n\r\n    this.name = name.replace(' ', '')\r\n\r\n    if ( !container ) {\r\n        container = $('body')\r\n    }\r\n    else if ( !(container.selector) ) {\r\n        if ( is.string(container) || (container.tagName && 'BODY DIV'.search(container.tagName) != -1) ) container = $(container)\r\n        else return error(errPrefix + 'app container is invalid. Please provide a selector string, a jQuery object ref or a DOM element ref')\r\n    }\r\n    container.attr('rasti', this.name)\r\n    \r\n    var self = this\r\n\r\n    var invalidData = 0\r\n\r\n\r\n    // private properties  \r\n\r\n    this.active = {\r\n        page  : null,\r\n        theme : '',\r\n        lang  : '',\r\n    }\r\n\r\n    this.pagers = new Map()\r\n\r\n\r\n    // public properties\r\n\r\n    this.options = Object.assign({}, options)\r\n\r\n    this.defaults = {\r\n        stats : self.options.stats,\r\n        noData : self.options.noData,\r\n    }\r\n\r\n    this.state = {}\r\n    Object.defineProperties(self.state, {\r\n        page  : { get : function() { return self.active.page.attr('page') }, enumerable : true },\r\n        theme : { get : function() { return self.active.theme }, enumerable : true },\r\n        lang  : { get : function() { return self.active.lang }, enumerable : true },\r\n        save : { value : function() {\r\n            localStorage.setItem('rasti.' + self.name, JSON.stringify(self.state))\r\n            log('State saved')\r\n        } },\r\n        get : { value : function() {\r\n            var state\r\n            try {\r\n                state = JSON.parse( localStorage.getItem('rasti.' + self.name) )\r\n                if ( !state ) log('No saved state found for app [%s]', self.name)\r\n                else if ( !is.object(state) ) invalid()\r\n                else return state\r\n            }\r\n            catch(err) {\r\n                invalid()\r\n            }\r\n\r\n            function invalid() {\r\n                error('Saved state for app [%s] is invalid', self.name)\r\n            }\r\n        } },\r\n        restore : { value : function() {\r\n            var state = self.state.get()\r\n            if (state) {\r\n                log('Restoring state...')\r\n                for (let prop in state) {\r\n                    self.state[prop] = state[prop]\r\n                }\r\n                if (state.theme) setTheme(state.theme)\r\n                if (state.lang) setLang(state.lang)\r\n                navTo(state.page)\r\n                log('State restored')\r\n            }\r\n            return state\r\n        } },\r\n        clear : { value : function() {\r\n            localStorage.removeItem('rasti.' + self.name)\r\n        } },\r\n    })\r\n\r\n    this.pages = {}\r\n\r\n    this.data = {}\r\n\r\n    this.ajax = {}\r\n\r\n    this.utils = {\r\n        is : is,\r\n        type : type,\r\n        sameType : sameType,\r\n    }\r\n\r\n    this.templates = {}\r\n\r\n    this.langs = {}\r\n\r\n\r\n    this.themes = {\r\n\r\n        base : {\r\n            font : 'normal 14px sans-serif',\r\n            palette : {\r\n                white   : '#fff',\r\n                lighter : '#ddd',\r\n                light   : '#bbb',\r\n                mid     : '#888',\r\n                dark    : '#444',\r\n                darker  : '#222',\r\n                black   : '#000',\r\n                detail  : 'darkcyan',\r\n                lighten : 'rgba(255,255,255,0.1)',\r\n                darken  : 'rgba(0,0,0,0.1)',\r\n            },\r\n        },\r\n\r\n    }\r\n\r\n\r\n    this.themeMaps = {\r\n\r\n        dark : {\r\n            page    : 'darker lighten', // bg, header bg\r\n            panel   : 'dark lighten',   // bg, header bg\r\n            section : 'mid lighten',    // bg, header bg\r\n            field   : 'light darker',   // bg, text\r\n            btn     : 'detail darker',  // bg, text\r\n            header  : 'darker',         // text\r\n            label   : 'darker',         // text\r\n            text    : 'darker',         // text\r\n        },\r\n\r\n        light : {\r\n            page    : 'lighter darken',\r\n            panel   : 'mid lighten',\r\n            section : 'light darken',\r\n            field   : 'lighter dark',\r\n            btn     : 'detail light',\r\n            header  : 'dark',\r\n            label   : 'mid',\r\n            text    : 'dark',\r\n        },\r\n        \r\n    }\r\n\r\n    // methods\r\n\r\n    function extend(props) {\r\n        if (!props || !is.object(props)) return error('Cannot extend app: no properties found')\r\n        for (var key in self) {\r\n            if ($.type(self[key]) === 'object' && $.type(props[key]) === 'object')\r\n                Object.assign(self[key], props[key])\r\n        }\r\n    }\r\n\r\n\r\n    function init(options) {\r\n\r\n        // cache options\r\n        if (options) {\r\n            if ( !is.object(options) ) warn('Init options must be an object!')\r\n            else Object.keys(self.options).forEach(function(key){\r\n                if (options[key]) {\r\n                    if ( !sameType(self.options[key], options[key])  ) warn('Init option [%s] is invalid', key)\r\n                    else self.options[key] = options[key]\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        // apply defaults\r\n        Object.keys(self.defaults).forEach(function(key){\r\n            if (!self.options[key]) self.options[key] = self.defaults[key]\r\n        })\r\n        \r\n\r\n        // define lang (if not already defined)\r\n        if (!self.options.lang) {\r\n            keys = Object.keys(self.langs)\r\n            if (keys.length) self.options.lang = keys[0]\r\n        }\r\n\r\n\r\n        // append theme style container\r\n        container.append('<style theme>')\r\n\r\n\r\n        // append page-options containers\r\n        container.find('[page]').each(function(i, el) {\r\n            $(el).append('<div class=\"page-options\">')\r\n        })\r\n\r\n\r\n        // init rasti blocks\r\n        container.find('[block]').each(function(i, el) {\r\n            initBlock($(el))\r\n        })\r\n\r\n\r\n        // create options for selects with data source\r\n        container.find('select[data]').each(function(i, el) {\r\n            updateBlock($(el))\r\n        })\r\n\r\n\r\n        // create tabs\r\n        container.find('[tabs]').each(function(i, el) {\r\n            createTabs($(el))\r\n        })\r\n        if (media.tablet || media.phone) container.find('[tabs-tablet]').each(function(i, el) {\r\n            createTabs($(el))\r\n        })\r\n        if (media.phone) container.find('[tabs-phone]').each(function(i, el) {\r\n            createTabs($(el))\r\n        })\r\n\r\n\r\n        // init nav\r\n        container.find('[nav]').click(function(e) {\r\n            var $el = $(this),\r\n                page = $el.attr('nav'),\r\n                params = {}\r\n\r\n            if (!page) return error('Missing page name in [nav] attribute of element:', el)\r\n\r\n            if (this.hasAttribute('params')) {\r\n                var $page = self.active.page,\r\n                    paramkeys = $el.attr('params'),\r\n                    $paramEl\r\n                if (paramkeys) {\r\n                    // get specified params\r\n                    paramkeys = paramkeys.split(' ')\r\n                    paramkeys.forEach(function(key) {\r\n                        $paramEl = $page.find('[navparam='+ key +']')\r\n                        if ($paramEl.length) params[key] = $paramEl.val()\r\n                        else warn('Could not find navparam element [%s]', key)\r\n                    })\r\n                }\r\n                else {\r\n                    // get all params\r\n                    $page.find('[navparam]').each(function(i, el){\r\n                        $el = $(el)\r\n                        key = resolveAttr($el, 'navparam')\r\n                        if (key) params[key] = $el.val()\r\n                    })\r\n                }\r\n            }\r\n            navTo(page, params)\r\n        })\r\n\r\n\r\n        // init submit\r\n        container.find('[submit]').click(function(e) {\r\n            var $el = $(this),\r\n                method = $el.attr('submit'),\r\n                callback = $el.attr('then'),\r\n                template = $el.attr('render'),\r\n                isValidCB = callback && is.function(self.utils[callback]),\r\n                start = window.performance.now(), end\r\n\r\n            if (!method) return error('Missing ajax method in [submit] attribute of el:', this)\r\n\r\n            if (callback && !isValidCB) error('Undefined utility method [%s] declared in [then] attribute of el:', callback, this)\r\n            \r\n            $el.addClass('loading').attr('disabled', true)\r\n\r\n            submitAjax(method, function(resdata){\r\n                end = window.performance.now()\r\n                var time = Math.floor(end - start) / 1000\r\n                log('Ajax method [%s] took %s seconds', method, time)\r\n\r\n                if (isValidCB) self.utils[callback](resdata)\r\n                if (template) render(template, resdata, time)\r\n\r\n                $el.removeClass('loading').removeAttr('disabled')\r\n            })\r\n        })\r\n\r\n\r\n        // init render\r\n        container.find('[render]').not('[submit]').click(function(e) {\r\n            var $el = $(this),\r\n                template = $el.attr('render')\r\n            if (!template) return error('Missing template name in [render] attribute of element:', el)\r\n            render(template)\r\n        })\r\n\r\n\r\n        // init actions\r\n        for (var action of 'click change'.split(' ')) {\r\n            container.find('['+ action +']').each(function(i, el){\r\n                var $el = $(el),\r\n                    method = $el.attr( action )\r\n                if ( !self.utils[ method ] ) return error('Undefined utility method \"%s\" declared in [%s] attribute of element:', method, action, el)\r\n                $(this).on( action , self.utils[ method ] )\r\n            })\r\n        }\r\n\r\n\r\n        // init pages\r\n        var page, $page\r\n        for (var name in self.pages) {\r\n            page = self.pages[name]\r\n            if ( !is.object(page) ) return error('pages.%s must be an object!', name)\r\n            $page = container.find('[page='+ name +']')\r\n            if ( !$page.length ) return error('No container found for page \"%s\". Please bind one via [page] attribute', name)\r\n            if (page.init) {\r\n                if ( !is.function(page.init) ) return error('pages.%s.init must be a function!', name)\r\n                else {\r\n                    log('Initializing page [%s]', name)\r\n                    self.active.page = $page\r\n                    page.init()\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // resolve empty headers and labels\r\n        'header label'.split(' ').forEach(function(attr){\r\n            var $el\r\n            container.find('['+attr+']').each(function(i, el) {\r\n                $el = $(el)\r\n                if (!$el.attr(attr)) $el.attr( attr, resolveAttr($el, attr) )\r\n            })\r\n        })\r\n\r\n\r\n        // fix labels\r\n        'input select textarea'.split(' ').forEach(function(tag){\r\n            container.find(tag + '[label]').each(function(i, el) {\r\n                fixLabel($(el))\r\n            })\r\n        })\r\n\r\n\r\n        // bind nav handler to popstate event\r\n        window.onpopstate = function(e) {\r\n            var page = e.state || location.hash.substring(1)\r\n            page\r\n                ? e.state ? navTo(page, null, true) : navTo(page)\r\n                : navTo(self.options.root)\r\n        }\r\n\r\n\r\n        // init history (if applicable)\r\n        if (self.options.history) initHistory()\r\n\r\n\r\n        // restore and persist state (if applicable)\r\n        var restored\r\n        if (self.options.persist) {\r\n            restored = self.state.restore()\r\n            $(window).on('beforeunload', function(e){ self.state.save() })\r\n        }\r\n\r\n        if ( !self.options.persist || !restored ) {\r\n\r\n            // set lang (if applicable and not already set)\r\n            if ( self.options.lang && !self.active.lang ) setLang(self.options.lang)\r\n            // if no lang, generate texts\r\n            if ( !self.options.lang ) {\r\n                container.find('[text]').each(function(i, el) {\r\n                    $(el).text( $(el).attr('text') )\r\n                })\r\n            }\r\n\r\n            // set theme (if not already set)\r\n            if ( !self.active.theme ) setTheme(self.options.theme)\r\n\r\n            // nav to page in hash or to root or to first page container\r\n            var page = location.hash.substring(1) || self.options.root\r\n            navTo(page && self.pages[page] ? page : container.find('[page]').first().attr('page'))\r\n        }\r\n\r\n\r\n        // init state elements\r\n        container.find('[state]').each(function(i, el){\r\n            var $el = $(el)\r\n            var prop = resolveAttr($el, 'state')\r\n\r\n            if (!prop) return\r\n\r\n            if (el.value !== undefined) {\r\n                // it's an element\r\n                bindElement($el, prop)\r\n            }\r\n            else {\r\n                // it's a container\r\n                $el.find('[field]').each(function(i, el){\r\n                    $el = $(el)\r\n                    bindElement($el, prop, $el.attr('field'))\r\n                })\r\n            }\r\n\r\n            function bindElement($el, prop, subprop){\r\n                var root = self.state\r\n                if (subprop) {\r\n                    root[prop] = root[prop] || {}\r\n                    root = root[prop]\r\n                    prop = subprop\r\n                }\r\n                if ( root[prop] ) {\r\n                    $el.val( root[prop] )\r\n                    if ( $el.attr('block') ) $el.trigger('change')\r\n                }\r\n                else root[prop] = ''\r\n                $el.on('change', function(e){\r\n                    root[prop] = $el.val()\r\n                })\r\n            }\r\n        })\r\n\r\n\r\n        container.trigger('rasti-ready')\r\n\r\n    }\r\n\r\n\r\n    function get(selector) {\r\n        if ( !self.active.page || !self.active.page.length ) return error('Cannot get(%s), active page is not defined', selector)\r\n        var $els = self.active.page.find('['+ selector +']')\r\n        if (!$els.length) error('Cannot get(%s), element not found in page [%s]', selector, self.active.page.attr('page'))\r\n        return $els\r\n    }\r\n\r\n    function set(selector, value) {        \r\n        if ( !self.active.page || !self.active.page.length ) return error('Cannot set(%s), active page is not defined', selector)\r\n        var $els = self.active.page.find('['+ selector +']')\r\n        if (!$els.length) error('Cannot set(%s), element not found in page [%s]', selector, self.active.page.attr('page'))\r\n        $els.each(function(i, el){\r\n            el.value = value\r\n            $(el).change()\r\n        })\r\n    }\r\n\r\n    function add(selector, ...values) {\r\n        if ( !self.active.page || !self.active.page.length ) return error('Cannot add(%s), active page is not defined', selector)\r\n        var $els = self.active.page.find('['+ selector +']')\r\n        if (!$els.length) error('Cannot add(%s), element not found in page [%s]', selector, self.active.page.attr('page'))\r\n        $els.each(function(i, el){\r\n            values.forEach(function(val){\r\n                if (is.array(val)) el.value = el.value.concat(val)\r\n                else el.value.push(val)\r\n            })\r\n            $(el).change()\r\n        })\r\n    }\r\n\r\n\r\n    function navTo(pagename, params, skipPushState) {\r\n\r\n        if (!pagename) return error('Cannot navigate, page undefined')\r\n\r\n        var page = self.pages[pagename],\r\n            $page = container.find('[page='+ pagename +']')\r\n\r\n        if (!$page.length) return error('Cannot nav to page [%s]: page container not found', pagename)\r\n        \r\n        self.active.page = $page\r\n\r\n        if ( params && !is.object(params) ) warn('Page [%s] nav params must be an object!', pagename)\r\n            \r\n        if (page && page.nav) {\r\n            !is.function(page.nav)\r\n                ? warn('Page [%s] nav property must be a function!', pagename)\r\n                : page.nav(params)\r\n        }\r\n\r\n        container.find('[page].active').removeClass('active')\r\n        self.active.page.addClass('active')\r\n\r\n        container.trigger('rasti-nav')\r\n\r\n        if (skipPushState) return\r\n        if (page && page.url) {\r\n            !is.string(page.url)\r\n                ? warn('Page [%s] url property must be a string!', pagename)\r\n                : window.history.pushState(pagename, null, '#'+page.url)\r\n        }\r\n        else {\r\n            window.history.pushState(pagename, null)\r\n        }\r\n    }\r\n\r\n\r\n    function render(name, data, time) {\r\n        var template = self.templates[name], html,\r\n            errPrefix = 'Cannot render template [%s]: '\r\n        if (!template) return error(errPrefix + 'template is not defined', name)\r\n\r\n        if (is.string(template)) {\r\n            html = template\r\n            template = function(data, lang) {\r\n                return data.map(function(obj){ return html }).join()\r\n            }\r\n        }\r\n\r\n        if (!is.function(template)) return error(errPrefix + 'template must be a string or a function', name)\r\n\r\n        var $el = container.find('[template='+ name +']')\r\n        if (!$el.length) return error(errPrefix + 'no element bound to template. Please bind one via [template] attribute.', name)\r\n        var el = $el[0]\r\n\r\n        if (!data) {\r\n            var datakey = $el.attr('data')\r\n            if (!datakey) return error(errPrefix + 'no data found for template. Please provide in ajax response or via [data] attribute in element:', name, el)\r\n            data = self.data[datakey]\r\n            if (!data) return error(errPrefix + 'undefined data source \"%s\" in [data] attribute of element:', name, datakey, el)\r\n        }\r\n\r\n        if (!data.length) return $el.html(`<div msg center textc>${ self.options.noData }</div>`)\r\n\r\n        var paging = $el.attr('paging')\r\n        var lang = self.langs && self.langs[self.active.lang]\r\n        paging\r\n            ? initPager($el, template, data, lang)\r\n            : $el.html( template(data, lang) )\r\n        if (el.hasAttribute('stats')) {\r\n            var stats = $('<div section class=\"stats\">')\r\n            stats.html( self.options.stats.replace('%n', data.length).replace('%t', time) )\r\n            $el.prepend(stats)\r\n        }\r\n\r\n        var fxkey = $el.attr('fx')\r\n        if (fxkey) {\r\n            var fx = rasti.fx[fxkey]\r\n            if (!fx) return warn('Undefined fx \"%s\" in [fx] attribute of element', fxkey, el)\r\n            paging ? fx($el.find('.results')) : fx($el)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function setTheme(themeString) {\r\n        var themeName = themeString.split(' ')[0],\r\n            theme = self.themes[themeName]\r\n\r\n        if (!theme) return error('Cannot set theme [%s]: theme not found', themeName)\r\n\r\n        var mapName = themeString.split(' ')[1] || ( is.object(theme.maps) && Object.keys(theme.maps)[0] ) || 'dark',\r\n            themeMap = ( is.object(theme.maps) && theme.maps[mapName] ) || self.themeMaps[mapName]\r\n\r\n        if (!themeMap) return error('Theme map [%s] not found', mapName)\r\n\r\n        log('Setting theme [%s:%s]', themeName, mapName)\r\n        self.active.theme = themeName\r\n        \r\n        var values = {\r\n            font : theme.font || self.themes.base.font,\r\n        }, colorNames, colors, c1, c2, defaultColorName\r\n\r\n        // map palette colors to attributes\r\n        for (var attr of Object.keys(themeMap)) {\r\n            if (!self.themeMaps.dark[attr]) return error('Mapping error in theme [%s]. Incorrect theme map property [%s]', themeName, attr)\r\n\r\n            colorNames = [c1, c2] = themeMap[attr].split(' ')\r\n            colors = [theme.palette[ c1 ], theme.palette[ c2 ]]\r\n\r\n            for (var i in colors) {\r\n                defaultColorName = self.themeMaps.dark[attr].split(' ')[i]\r\n                if (defaultColorName && !colors[i]) {\r\n                    colors[i] = self.themes.base.palette[ colorNames[i] ]\r\n                    if (!colors[i]) {\r\n                        warn('Mapping error in theme [%s] for attribute [%s]. Color [%s] not found. Falling back to default color [%s].', themeName, attr, colorNames[i], defaultColorName)\r\n                        colors[i] = self.themes.base.palette[ defaultColorName ]\r\n                    }\r\n                }\r\n            }\r\n            values[attr] = colors\r\n        }\r\n\r\n        // generate theme style and apply it\r\n        container.find('style[theme]').html( getThemeStyle(values) )\r\n\r\n        // apply any styles defined by class\r\n        for (var key of Object.keys(theme.palette)) {\r\n            var color = theme.palette[key]\r\n            container.find('.' + key).css('background-color', color)\r\n        }\r\n    }\r\n\r\n\r\n    function setLang(langName) {\r\n        var lang = self.langs[ langName ],\r\n            errPrefix = 'Cannot set lang [%s]: '\r\n\r\n        if (!lang) return error(errPrefix + 'lang not found', langName)\r\n        if ( !is.object(lang) ) return error(errPrefix + 'lang must be an object!', langName)\r\n\r\n        log('Setting lang [%s]', langName)\r\n        self.active.lang = langName\r\n\r\n        var $elems = $(), $el, keys, string\r\n        var attributes = 'label header text placeholder'.split(' ')\r\n\r\n        attributes.forEach(function(attr){\r\n            $elems = $elems.add('['+attr+']')\r\n        })\r\n\r\n        $elems.each(function(i, el) {\r\n            if (el.hasAttribute('fixed')) el = el.children[0]\r\n            $el = $(el)   \r\n            keys = el.langkeys\r\n\r\n            if (!keys) {\r\n                keys = {}\r\n                attributes.forEach(function(attr){\r\n                    if ($el.attr(attr)) keys[attr] = $el.attr(attr)\r\n                })\r\n                el.langkeys = keys\r\n            }\r\n\r\n            for (var attr in keys) {\r\n                string = getString(langName, keys[attr])\r\n                attr === 'text'\r\n                    ? $el.text(string || keys[attr])\r\n                    : string ? $el.attr(attr, string) : null\r\n            }\r\n        })\r\n\r\n        Object.keys(self.defaults).forEach(function(key){\r\n            self.options[key] = lang['rasti_'+key] || self.defaults[key]\r\n        })\r\n    }\r\n\r\n\r\n    function updateBlock($el, data) {\r\n        var el = $el[0]\r\n        var type = el.nodeName == 'SELECT' ? 'select' : $el.attr('block')\r\n        if (!type) return error('Missing block type in [block] attribute in element:', el)\r\n        \r\n        var block = rasti.blocks[type]\r\n        if (!block) return error('Undefined block type \"%s\" declared in [block] attribute of element:', type, el)\r\n        \r\n        if (!data) {\r\n            var datakey = resolveAttr($el, 'data')\r\n            if (!datakey) return\r\n\r\n            data = self.data[datakey]\r\n            if (!data) return error('Undefined data source \"%s\" resolved for element:', datakey, el)\r\n        }\r\n\r\n        var $options, field, alias\r\n\r\n        // TODO: this should be in the block, not here\r\n        if (type === 'multi') {\r\n            var field = $el.attr('field')\r\n            if (!field) return error('Missing field name in [field] attribute of element:', el)\r\n            // check if options div already exists\r\n            $options = $el.closest('[page]').find('[options='+ field +']')\r\n            if (!$options.length) {\r\n                // if not create it and append it to page\r\n                $options = $('<div field block='+ type +' options='+ field +'>')\r\n                $el.closest('[page]').children('.page-options').append($options)\r\n            }   \r\n        }\r\n        else {\r\n            $options = $el\r\n        }\r\n\r\n        is.function(data)\r\n            ? data(applyTemplate)\r\n            : applyTemplate(data)\r\n        \r\n        function applyTemplate(data) {\r\n            $options.html( block.template(data, $el) )\r\n\r\n            if (invalidData) {\r\n                var field = $el.attr('field'),\r\n                    page = $el.closest('[page]').attr('page')\r\n                warn('Detected %s invalid data entries for field [%s] in page [%s]', invalidData, field, page)\r\n                invalidData = 0\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    function toggleFullScreen(e) {\r\n        var prefixes = 'moz webkit'.split(' ')\r\n        prefixes.forEach(function(p){\r\n            if ( ! (p + 'FullscreenElement' in document) ) return\r\n            if ( !document[ p + 'FullscreenElement' ]) {\r\n                document.documentElement[ p + 'RequestFullScreen' ]();\r\n            }\r\n            else if (document[ p + 'CancelFullScreen' ]) {\r\n                document[ p + 'CancelFullScreen' ]();\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    // internal utils\r\n\r\n    function createTabs($el) {\r\n        var el = $el[0],\r\n            $tabs = el.hasAttribute('page')\r\n                ? $el.children('[panel]')\r\n                : el.hasAttribute('panel')\r\n                    ? $el.children('[section]')\r\n                    : undefined\r\n        if (!$tabs) return error('[tabs] attribute can only be used in pages or panels, was found in element:', el)\r\n\r\n        var $labels = $('<div class=\"tab-labels\">'),\r\n            $bar = $('<div class=\"bar\">'),\r\n            $tab, label, position\r\n\r\n        $tabs.each(function(i, tab){\r\n            $tab = $(tab)\r\n            $tab.attr('tab', i)\r\n            label = resolveAttr($tab, 'tab-label') || 'TAB ' + (i+1)\r\n\r\n            $labels.append($(`<div tab-label=${i} text=\"${ label }\">`))\r\n        })\r\n\r\n        $labels.append($bar).prependTo($el)\r\n        var $flow = $tabs.wrapAll('<div h-flow>').parent()\r\n\r\n        $labels.on('click', function(e){\r\n            var $label = $(e.target),\r\n                tabnr = $label.attr('tab-label'),\r\n                $tab = $tabs.filter(`[tab=\"${ tabnr }\"]`)\r\n\r\n            $tabs.removeClass('active')\r\n            $tab.addClass('active')[0].scrollIntoView()\r\n\r\n            $labels.children().removeClass('active')\r\n            $label.addClass('active')\r\n            \r\n        })\r\n\r\n        $flow.on('scroll', function(e){\r\n            position = this.scrollLeft / this.scrollWidth\r\n            $bar.css({ left : position * this.offsetWidth })\r\n        })\r\n\r\n        container.on('rasti-nav', function(e){\r\n            if (!isInActivePage($el)) return\r\n            $bar.css({ width : $flow[0].offsetWidth / $tabs.length })\r\n            if (!$labels.children('.active').length) $labels.children().first().click()\r\n        })\r\n\r\n        $(window).on('resize', function (e) {\r\n            if (!isInActivePage($el)) return\r\n            $labels.find('.active').click()\r\n            $bar.css({ width : $flow[0].offsetWidth / $tabs.length })\r\n        })\r\n\r\n        function isInActivePage($el) {\r\n            return self.active.page.find($el).length\r\n                || self.active.page.attr('page') === $el.attr('page')\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    function initBlock($el) {\r\n        var el = $el[0]\r\n        var type = el.nodeName == 'SELECT' ? 'select' : $el.attr('block')\r\n        if (!type) return error('Missing block type in [block] attribute in element:', el)\r\n        \r\n        var block = rasti.blocks[type]\r\n        if (!block) return error('Undefined block type \"%s\" declared in [block] attribute of element:', type, el)\r\n\r\n        // if applicable, create options from data source\r\n        if (el.hasAttribute('data')) updateBlock($el)\r\n\r\n        block.init($el)\r\n    }\r\n\r\n\r\n    function initHistory() {\r\n        self._history = new History()\r\n\r\n        Object.defineProperty(self, 'history', { get: function(){\r\n            return self._history.content\r\n        } })\r\n        Object.defineProperties(self.history, {\r\n            back : { value : self._history.back },\r\n            forth : { value : self._history.forth },\r\n        })\r\n    }\r\n\r\n\r\n    function initPager($el, template, data, lang) {\r\n        var name = $el.attr('template'),\r\n            fx = $el.attr('fx') && rasti.fx[$el.attr('fx')],\r\n            page_size = parseInt($el.attr('paging')),\r\n            pager = newPager(name, data, page_size),\r\n            paging, columns, sizes\r\n\r\n        if ($el[0].hasAttribute('columns')) columns = `\r\n            <div class=\"columns floatl ib_\">\r\n                <label>Columns:</label>\r\n                <button btn>1</button>\r\n                <button btn value=2>2</button>\r\n                <button btn value=3>3</button>\r\n            </div>`\r\n\r\n        if (pager.total > 1) paging = `<div class=\"paging ib ib_\">\r\n                <button class=\"btn prev\">&lt;</button>\r\n                <span class=\"page\"></span>\r\n                <button class=\"btn next\">&gt;</button>\r\n            </div>`\r\n\r\n        sizes = `<div class=\"sizes floatr ib_\">\r\n                <label>Page size:</label>\r\n                <button btn value=5>5</button>\r\n                <button btn value=10>10</button>\r\n                <button btn value=20>20</button>\r\n            </div>`\r\n\r\n        $el.html(`\r\n            <div class=\"results scrolly\"></div>\r\n            <div class=\"controls small bottom centerx ib_\">\r\n                ${ columns || '' }\r\n                ${ paging || '' }\r\n                ${ sizes }\r\n            </div>\r\n        `)\r\n\r\n        $controls = $el.children('.controls')\r\n        $results = $el.children('.results')\r\n\r\n        $controls.on('click', '.next', function(e){\r\n            update( pager.next() )\r\n        })\r\n\r\n        $controls.on('click', '.prev', function(e){\r\n            update( pager.prev() )\r\n        })\r\n\r\n        $controls.on('click', '.sizes button', function(e){\r\n            pager.setPageSize(this.value)\r\n            update( pager.next() )\r\n            pager.total > 1\r\n                ? $controls.find('.paging').show()\r\n                : $controls.find('.paging').hide()\r\n        })\r\n\r\n        $controls.on('click', '.columns button', function(e){\r\n            $results.removeClass('columns-2 columns-3')\r\n                .addClass(this.value ? 'columns-' + this.value : '')\r\n        })\r\n\r\n        $results.html( template(pager.next(), lang) )\r\n        $controls.find('.page').html(pager.page + '/' + pager.total)\r\n\r\n        function update(data){\r\n            $results.html( template(data, lang) )\r\n            $controls.find('.page').html(pager.page + '/' + pager.total)\r\n            if ( is.function(fx) ) fx($results)\r\n        }\r\n    }\r\n\r\n    function getPager(id) {\r\n        let pager = self.pagers.get(id)\r\n        if (!pager) error('No pager found for template [%s]', id)\r\n        return pager\r\n    }\r\n    function newPager(id, results, page_size) {\r\n        let pager = new Pager(id, results, page_size)\r\n        self.pagers.set(id, pager)\r\n        return pager\r\n    }\r\n    function deletePager(pager) {\r\n        if (!pager || !pager.id) return\r\n        self.pagers.delete(pager.id)\r\n    }\r\n\r\n\r\n    function submitAjax(method, callback) {\r\n        var ajax = self.ajax[ method ]\r\n        if ( !is.function(ajax) ) return error('Ajax method ['+ method +'] is not defined')\r\n\r\n        var $form = container.find('[ajax='+ method +']')\r\n        if (!$form.length) return error('No container element bound to ajax method [%s]. Please bind one via [ajax] attribute', method)\r\n\r\n        var reqdata = {}, field\r\n        $form.find('[field]').each(function(i, el){\r\n            $el = $(el)\r\n            field = $el.attr('field')\r\n            if (field) {\r\n                reqdata[field] = $el.val() || $el.attr('value')\r\n            }\r\n        })\r\n\r\n        ajax(reqdata, callback)\r\n    }\r\n\r\n\r\n    function getThemeStyle(values) {\r\n        var ns = `[rasti=${ self.name }]`\r\n        return `\r\n            ${ns} {\r\n                font: ${ values.font };\r\n                color: ${ values.text[0] };\r\n            }\r\n            ${ns} [page]    { background-color: ${ values.page[0] }; }\r\n            ${ns} [panel]   { background-color: ${ values.panel[0] }; }\r\n            ${ns} [section] { background-color: ${ values.section[0] }; }\r\n\r\n            ${ns} [page][header]:before,\r\n                  [page][footer]:after     { background-color: ${ values.page[1] }; }\r\n            ${ns} [panel][header]:before   { background-color: ${ values.panel[1] }; }\r\n            ${ns} [section][header]:before { background-color: ${ values.section[1] }; }\r\n\r\n            ${ns} .tab-labels        { background-color: ${ values.panel[0] }; }\r\n            ${ns} .tab-labels > .bar { background-color: ${ values.btn[0] }; }\r\n\r\n            ${ns} [field] {\r\n                background-color: ${ values.field[0] };\r\n                color: ${ values.field[1] };\r\n            }\r\n\r\n            ${ns} [btn], .btn, [block=buttons] > div {\r\n                background-color: ${ values.btn[0] };\r\n                color: ${ values.btn[1] }; \r\n            }\r\n\r\n            ${ns} [header]:before { color: ${ values.header[0] }; }\r\n            ${ns} [label]:not([header]):before  { color: ${ values.label[0] }; }\r\n            `\r\n    }\r\n\r\n\r\n    function getString(lang, key) {\r\n        if ( !is.object(self.langs[lang]) ) {\r\n            error('Lang [%s] is not defined', lang)\r\n            return\r\n        }\r\n        var string = self.langs[lang][key]\r\n        if ( !is.string(string) ) warn('Lang [%s] does not contain key [%s]', lang, key)\r\n        else return string\r\n    }\r\n\r\n\r\n    function resolveAttr($el, name) {\r\n        var value = $el.attr(name) || $el.attr('field') || $el.attr('section') || $el.attr('panel') || $el.attr('page')\r\n        if (!value) warn('Could not resolve value of [%s] attribute in el:', name, $el[0])\r\n        return value\r\n    }\r\n\r\n\r\n    function fixLabel($el) {\r\n        var $div = $(`<div fixed label=\"${ $el.attr('label') }\" >`)\r\n        $el.wrap($div)\r\n        $el[0].removeAttribute('label')\r\n    }\r\n\r\n\r\n    function setImg($el, basepath) {\r\n        $el.css('background-image', 'url('+ basepath + ($el.val() || $el.attr('value')) +'.png)')\r\n    }\r\n\r\n\r\n    // internal classes\r\n\r\n    class History {\r\n\r\n        constructor() {\r\n            this.i = 0\r\n            this.content = []\r\n        }\r\n        \r\n        back() {\r\n            if (this.i > 0) navTo(this.content[--(this.i)])\r\n        }\r\n        forth() {\r\n            if (this.i < this.content.length) navTo(this.content[++(this.i)])\r\n        }\r\n        push(page) {\r\n            this.content.splice(this.i, null, page)\r\n            this.i++\r\n        }\r\n    }\r\n\r\n\r\n    class Pager {\r\n\r\n        constructor(id, results, page_size) {\r\n            this.id = id\r\n            if ( !is.string(id) ) return error('Pager id must be a string')\r\n            this.logid = `Pager for template [${ this.id }]:`\r\n            if ( !is.array(results) ) return error('%s Results must be an array', this.logid)\r\n            if ( !is.number(page_size) ) return error('%s Page size must be a number', this.logid)\r\n            this.results = results\r\n            this.page_size = page_size\r\n            this.page = 0\r\n            this.total = Math.ceil(this.results.length / this.page_size)\r\n\r\n        }\r\n\r\n        next() {\r\n            if (this.hasNext()) this.page++\r\n            else warn('%s No next page', this.logid)\r\n            return this.getPageResults(this.page)\r\n        }\r\n\r\n        prev() {\r\n            if (this.hasPrev()) this.page--\r\n            else warn('%s No previous page', this.logid)\r\n            return this.getPageResults(this.page)\r\n        }\r\n\r\n        hasNext() {\r\n            return this.results.length > this.page * this.page_size\r\n        }\r\n\r\n        hasPrev() {\r\n            return this.page > 1\r\n        }\r\n\r\n        setPageSize(size) {\r\n            size = parseInt(size)\r\n            if ( !is.number(size) ) return error('%s Must specify a number as the page size', this.logid)\r\n            this.page_size = size\r\n            this.page = 0\r\n            this.total = Math.ceil(this.results.length / this.page_size)\r\n        }\r\n\r\n        getPageResults(page) {\r\n            if ( !is.number(page) ) {\r\n                error('%s Must specify a page number to get results from', this.logid)\r\n                return []\r\n            }\r\n            try {\r\n                var i = (page -1) * this.page_size\r\n                return this.results.slice(i, i + this.page_size)\r\n            }\r\n            catch(err) {\r\n                error('%s Could not get results of page %s, error:', this.logid, page, err)\r\n                return []\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // prototype extensions\r\n\r\n    (function(){\r\n\r\n        Array.prototype.remove = function(el) {\r\n            var i = this.indexOf(el);\r\n            if (i >= 0) this.splice(i, 1);\r\n        }\r\n\r\n        String.prototype.capitalize = function() {\r\n            return this.length && this[0].toUpperCase() + this.slice(1).toLowerCase()\r\n        }\r\n\r\n    })()\r\n\r\n\r\n    // api\r\n\r\n    return Object.freeze({\r\n\r\n        // objects\r\n        options : this.options,\r\n        history : this.history,\r\n        state : this.state,\r\n        pages : this.pages,\r\n        data : this.data,\r\n        ajax : this.ajax,\r\n        utils : this.utils,\r\n        langs : this.langs,\r\n        themes : this.themes,\r\n        themeMaps : this.themeMaps,\r\n        templates : this.templates,\r\n\r\n        // methods\r\n        extend : extend,\r\n        init : init,\r\n        get : get,\r\n        set : set,\r\n        add : add,\r\n        navTo : navTo,\r\n        render : render,\r\n        setLang : setLang,\r\n        setTheme : setTheme,\r\n        updateBlock : updateBlock,\r\n        toggleFullScreen : toggleFullScreen,\r\n    })\r\n\r\n}\r\n\r\n\r\n// static properties and methods\r\n\r\nrasti.log = log\r\nrasti.warn = warn\r\nrasti.error = error\r\n\r\nrasti.blocks = require('./blocks/all')\r\nrasti.fx = {\r\n\r\n    stack : function($el) {\r\n        $el.children().each(function(i, el){\r\n            setTimeout(function(){\r\n                el.style.opacity = 1\r\n                el.style.marginTop = '15px'\r\n            }, i * 50);\r\n        })\r\n    },\r\n\r\n}\r\nrasti.options = {log : 'warn'}\r\n\r\nmodule.exports = Object.freeze(rasti)\r\n\r\n\r\n// bootstrap any apps defined via rasti attribute\r\nfunction bootstrap() {\r\n    var appContainers = $(document).find('[rasti]'),\r\n        appName, app, extendProps\r\n\r\n    if (appContainers.length) appContainers.forEach(function(el){\r\n        appName = el.getAttribute('rasti')\r\n        if (!appName) error('Missing app name in [rasti] attribute of app container:', el)\r\n        else if (global[appName]) error('Name [%s] already taken, please choose another name for app in container:', appName, el)\r\n        else {\r\n            global[appName] = app = new rasti(appName, el)\r\n            Object.keys(app.options).forEach(function(key) {\r\n                if (el.hasAttribute(key)) {\r\n                    app.options[key] = el.getAttribute(key)\r\n                    // non-value boolean attributes are true\r\n                    if (is.boolean(options[key]) && !app.options[key]) app.options[key] = true\r\n                }\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\n\r\nfunction genBlockStyles() {\r\n    var styles = '<style blocks>'\r\n    for (var key in rasti.blocks) {\r\n        styles += rasti.blocks[key].style\r\n    }\r\n    styles += '</style>'\r\n    $('body').append(styles)\r\n}\r\n\r\n\r\nvar rastiCSS\r\n\r\n/* rasti CSS */\r\n\r\n\r\nif (rastiCSS) $('body').append('<style>' + rastiCSS + '</style>')\r\ngenBlockStyles()\r\nbootstrap()\r\n",
    "const is = {}\r\n'object function array string number regex boolean'.split(' ').forEach(function(t){\r\n    is[t] = function(exp){ return type(exp) === t }\r\n})\r\nfunction type(exp) {\r\n        var clazz = Object.prototype.toString.call(exp)\r\n        return clazz.substring(8, clazz.length-1).toLowerCase()\r\n}\r\nfunction sameType(exp1, exp2) {\r\n    return type(exp1) === type(exp2)\r\n}\r\n\r\n\r\nfunction checkData(data) {\r\n    switch (typeof data) {\r\n    case 'string':\r\n        data = {value: data, label: data, alias: data.toLowerCase()}\r\n        break\r\n    case 'object':\r\n        if ( !is.string(data.value) || !is.string(data.label) ) {\r\n            error('Invalid data object (must have string properties \"value\" and \"label\"):', data)\r\n            invalidData++\r\n            data = {value: '', label: 'INVALID DATA', alias: ''}\r\n        }\r\n        else if ( !is.string(data.alias) ) {\r\n            if (data.alias) {\r\n                error('Invalid data property \"alias\" (must be a string):', data)\r\n                invalidData++\r\n            }\r\n            data.alias = data.value.toLowerCase()\r\n        }\r\n        else data.alias = data.alias.toLowerCase() +' '+ data.value.toLowerCase()\r\n        break\r\n    default:\r\n        error('Invalid data (must be a string or an object):', data)\r\n        invalidData++\r\n        data = {value: '', label: 'INVALID DATA', alias: ''}\r\n    }\r\n    return data\r\n}\r\n\r\n\r\nfunction rastiError(msg, ...args){\r\n    this.msg = msg\r\n    this.el = args.pop()\r\n    this.args = args\r\n}\r\n\r\n\r\nfunction random() {\r\n    return (Math.random() * 6 | 0) + 1\r\n}\r\n\r\n\r\nfunction onMobile() {\r\n    return window.innerWidth < 500\r\n}\r\n\r\n\r\nmodule.exports = {\r\n\tis : is,\r\n\ttype : type,\r\n\tsameType : sameType,\r\n\tcheckData : checkData,\r\n\trandom : random,\r\n\tonMobile : onMobile,\r\n    rastiError : rastiError,\r\n}"
  ]
}